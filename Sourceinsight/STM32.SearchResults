---- uint16_t Matches (2572 in 31 files) ----
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define HSE_STARTUP_TIMEOUT   ((uint16_t)0x0500) /*!< Time out for HSE start up */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):typedef uint16_t u16;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):typedef const uint16_t uc16;  /*!< Read Only */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):typedef __IO uint16_t vu16;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):typedef __I uint16_t vuc16;  /*!< Read Only */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR7;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED7;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR8;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED8;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR9;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED9;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR10;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED10; 
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t RTCCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED11;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED12;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CSR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED13[5];
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR11;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED14;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR12;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED15;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR13;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED16;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR14;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED17;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR15;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED18;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR16;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED19;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR17;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED20;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR18;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED21;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR19;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED22;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR20;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED23;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR21;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED24;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR22;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED25;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR23;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED26;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR24;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED27;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR25;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED28;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR26;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED29;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR27;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED30;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR28;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED31;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR29;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED32;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR30;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED33; 
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR31;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED34;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR32;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED35;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR33;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED36;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR34;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED37;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR35;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED38;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR36;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED39;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR37;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED40;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR38;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED41;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR39;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED42;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR40;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED43;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR41;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED44;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR42;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED45;    
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t RDP;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t USER;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t Data0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t Data1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t WRP0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t WRP1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t WRP2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t WRP3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t OAR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t OAR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t SR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t SR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED7;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t TRISE;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED8;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CRH;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CRL;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t PRLH;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t PRLL;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DIVH;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DIVL;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CNTH;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CNTL;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED7;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t ALRH;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED8;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t ALRL;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED9;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t SR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CRCPR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t RXCRCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t TXCRCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t I2SCFGR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED7;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t I2SPR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED8;  
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t SMCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DIER;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t SR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t EGR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCMR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCMR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED7;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCER;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED8;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CNT;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED9;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t PSC;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED10;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t ARR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED11;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t RCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED12;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED13;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED14;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCR3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED15;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CCR4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED16;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t BDTR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED17;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DCR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED18;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DMAR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED19;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t SR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED0;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t DR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t BRR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR1;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR2;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED4;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t CR3;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED5;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  __IO uint16_t GTPR;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):  uint16_t  RESERVED6;
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_LPDS                         ((uint16_t)0x0001)     /*!< Low-Power Deepsleep */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PDDS                         ((uint16_t)0x0002)     /*!< Power Down Deepsleep */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_CWUF                         ((uint16_t)0x0004)     /*!< Clear Wakeup Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_CSBF                         ((uint16_t)0x0008)     /*!< Clear Standby Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PVDE                         ((uint16_t)0x0010)     /*!< Power Voltage Detector Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS                          ((uint16_t)0x00E0)     /*!< PLS[2:0] bits (PVD Level Selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_0                        ((uint16_t)0x0020)     /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_1                        ((uint16_t)0x0040)     /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2                        ((uint16_t)0x0080)     /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V2                      ((uint16_t)0x0000)     /*!< PVD level 2.2V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V3                      ((uint16_t)0x0020)     /*!< PVD level 2.3V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V4                      ((uint16_t)0x0040)     /*!< PVD level 2.4V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V5                      ((uint16_t)0x0060)     /*!< PVD level 2.5V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V6                      ((uint16_t)0x0080)     /*!< PVD level 2.6V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V7                      ((uint16_t)0x00A0)     /*!< PVD level 2.7V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V8                      ((uint16_t)0x00C0)     /*!< PVD level 2.8V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_PLS_2V9                      ((uint16_t)0x00E0)     /*!< PVD level 2.9V */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CR_DBP                          ((uint16_t)0x0100)     /*!< Disable Backup Domain write protection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CSR_WUF                         ((uint16_t)0x0001)     /*!< Wakeup Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CSR_SBF                         ((uint16_t)0x0002)     /*!< Standby Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CSR_PVDO                        ((uint16_t)0x0004)     /*!< PVD Output */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  PWR_CSR_EWUP                        ((uint16_t)0x0100)     /*!< Enable WKUP pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR1_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR2_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR3_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR4_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR5_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR6_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR7_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR8_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR9_D                           ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR10_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR11_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR12_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR13_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR14_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR15_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR16_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR17_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR18_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR19_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR20_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR21_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR22_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR23_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR24_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR25_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR26_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR27_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR28_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR29_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR30_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR31_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR32_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR33_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR34_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR35_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR36_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR37_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR38_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR39_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR40_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR41_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_DR42_D                          ((uint16_t)0xFFFF)     /*!< Backup data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_RTCCR_CAL                       ((uint16_t)0x007F)     /*!< Calibration value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_RTCCR_CCO                       ((uint16_t)0x0080)     /*!< Calibration Clock Output */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_RTCCR_ASOE                      ((uint16_t)0x0100)     /*!< Alarm or Second Output Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_RTCCR_ASOS                      ((uint16_t)0x0200)     /*!< Alarm or Second Output Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_CSR_CTE                         ((uint16_t)0x0001)     /*!< Clear Tamper event */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_CSR_CTI                         ((uint16_t)0x0002)     /*!< Clear Tamper Interrupt */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_CSR_TPIE                        ((uint16_t)0x0004)     /*!< TAMPER Pin interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_CSR_TEF                         ((uint16_t)0x0100)     /*!< Tamper Event Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  BKP_CSR_TIF                         ((uint16_t)0x0200)     /*!< Tamper Interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RCC_AHBENR_DMA1EN                   ((uint16_t)0x0001)            /*!< DMA1 clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RCC_AHBENR_SRAMEN                   ((uint16_t)0x0004)            /*!< SRAM interface clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RCC_AHBENR_FLITFEN                  ((uint16_t)0x0010)            /*!< FLITF clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RCC_AHBENR_CRCEN                    ((uint16_t)0x0040)            /*!< CRC clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS): #define  RCC_AHBENR_DMA2EN                  ((uint16_t)0x0002)            /*!< DMA2 clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS): #define  RCC_AHBENR_FSMCEN                  ((uint16_t)0x0100)            /*!< FSMC clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS): #define  RCC_AHBENR_SDIOEN                  ((uint16_t)0x0400)            /*!< SDIO clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS): #define  RCC_AHBENR_FSMCEN                  ((uint16_t)0x0100)            /*!< FSMC clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR0                        ((uint16_t)0x0001)            /*!< Port input data, bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR1                        ((uint16_t)0x0002)            /*!< Port input data, bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR2                        ((uint16_t)0x0004)            /*!< Port input data, bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR3                        ((uint16_t)0x0008)            /*!< Port input data, bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR4                        ((uint16_t)0x0010)            /*!< Port input data, bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR5                        ((uint16_t)0x0020)            /*!< Port input data, bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR6                        ((uint16_t)0x0040)            /*!< Port input data, bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR7                        ((uint16_t)0x0080)            /*!< Port input data, bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR8                        ((uint16_t)0x0100)            /*!< Port input data, bit 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR9                        ((uint16_t)0x0200)            /*!< Port input data, bit 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR10                       ((uint16_t)0x0400)            /*!< Port input data, bit 10 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR11                       ((uint16_t)0x0800)            /*!< Port input data, bit 11 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR12                       ((uint16_t)0x1000)            /*!< Port input data, bit 12 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR13                       ((uint16_t)0x2000)            /*!< Port input data, bit 13 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR14                       ((uint16_t)0x4000)            /*!< Port input data, bit 14 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_IDR_IDR15                       ((uint16_t)0x8000)            /*!< Port input data, bit 15 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR0                        ((uint16_t)0x0001)            /*!< Port output data, bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR1                        ((uint16_t)0x0002)            /*!< Port output data, bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR2                        ((uint16_t)0x0004)            /*!< Port output data, bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR3                        ((uint16_t)0x0008)            /*!< Port output data, bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR4                        ((uint16_t)0x0010)            /*!< Port output data, bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR5                        ((uint16_t)0x0020)            /*!< Port output data, bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR6                        ((uint16_t)0x0040)            /*!< Port output data, bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR7                        ((uint16_t)0x0080)            /*!< Port output data, bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR8                        ((uint16_t)0x0100)            /*!< Port output data, bit 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR9                        ((uint16_t)0x0200)            /*!< Port output data, bit 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR10                       ((uint16_t)0x0400)            /*!< Port output data, bit 10 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR11                       ((uint16_t)0x0800)            /*!< Port output data, bit 11 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR12                       ((uint16_t)0x1000)            /*!< Port output data, bit 12 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR13                       ((uint16_t)0x2000)            /*!< Port output data, bit 13 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR14                       ((uint16_t)0x4000)            /*!< Port output data, bit 14 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_ODR_ODR15                       ((uint16_t)0x8000)            /*!< Port output data, bit 15 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR0                         ((uint16_t)0x0001)            /*!< Port x Reset bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR1                         ((uint16_t)0x0002)            /*!< Port x Reset bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR2                         ((uint16_t)0x0004)            /*!< Port x Reset bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR3                         ((uint16_t)0x0008)            /*!< Port x Reset bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR4                         ((uint16_t)0x0010)            /*!< Port x Reset bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR5                         ((uint16_t)0x0020)            /*!< Port x Reset bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR6                         ((uint16_t)0x0040)            /*!< Port x Reset bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR7                         ((uint16_t)0x0080)            /*!< Port x Reset bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR8                         ((uint16_t)0x0100)            /*!< Port x Reset bit 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR9                         ((uint16_t)0x0200)            /*!< Port x Reset bit 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR10                        ((uint16_t)0x0400)            /*!< Port x Reset bit 10 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR11                        ((uint16_t)0x0800)            /*!< Port x Reset bit 11 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR12                        ((uint16_t)0x1000)            /*!< Port x Reset bit 12 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR13                        ((uint16_t)0x2000)            /*!< Port x Reset bit 13 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR14                        ((uint16_t)0x4000)            /*!< Port x Reset bit 14 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define GPIO_BRR_BR15                        ((uint16_t)0x8000)            /*!< Port x Reset bit 15 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0                   ((uint16_t)0x000F)            /*!< EXTI 0 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1                   ((uint16_t)0x00F0)            /*!< EXTI 1 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2                   ((uint16_t)0x0F00)            /*!< EXTI 2 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3                   ((uint16_t)0xF000)            /*!< EXTI 3 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PA                ((uint16_t)0x0000)            /*!< PA[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PB                ((uint16_t)0x0001)            /*!< PB[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PC                ((uint16_t)0x0002)            /*!< PC[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PD                ((uint16_t)0x0003)            /*!< PD[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PE                ((uint16_t)0x0004)            /*!< PE[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PF                ((uint16_t)0x0005)            /*!< PF[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI0_PG                ((uint16_t)0x0006)            /*!< PG[0] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PA                ((uint16_t)0x0000)            /*!< PA[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PB                ((uint16_t)0x0010)            /*!< PB[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PC                ((uint16_t)0x0020)            /*!< PC[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PD                ((uint16_t)0x0030)            /*!< PD[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PE                ((uint16_t)0x0040)            /*!< PE[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PF                ((uint16_t)0x0050)            /*!< PF[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI1_PG                ((uint16_t)0x0060)            /*!< PG[1] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PA                ((uint16_t)0x0000)            /*!< PA[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PB                ((uint16_t)0x0100)            /*!< PB[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PC                ((uint16_t)0x0200)            /*!< PC[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PD                ((uint16_t)0x0300)            /*!< PD[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PE                ((uint16_t)0x0400)            /*!< PE[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PF                ((uint16_t)0x0500)            /*!< PF[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI2_PG                ((uint16_t)0x0600)            /*!< PG[2] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PA                ((uint16_t)0x0000)            /*!< PA[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PB                ((uint16_t)0x1000)            /*!< PB[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PC                ((uint16_t)0x2000)            /*!< PC[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PD                ((uint16_t)0x3000)            /*!< PD[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PE                ((uint16_t)0x4000)            /*!< PE[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PF                ((uint16_t)0x5000)            /*!< PF[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR1_EXTI3_PG                ((uint16_t)0x6000)            /*!< PG[3] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4                   ((uint16_t)0x000F)            /*!< EXTI 4 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5                   ((uint16_t)0x00F0)            /*!< EXTI 5 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6                   ((uint16_t)0x0F00)            /*!< EXTI 6 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7                   ((uint16_t)0xF000)            /*!< EXTI 7 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PA                ((uint16_t)0x0000)            /*!< PA[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PB                ((uint16_t)0x0001)            /*!< PB[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PC                ((uint16_t)0x0002)            /*!< PC[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PD                ((uint16_t)0x0003)            /*!< PD[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PE                ((uint16_t)0x0004)            /*!< PE[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PF                ((uint16_t)0x0005)            /*!< PF[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI4_PG                ((uint16_t)0x0006)            /*!< PG[4] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PA                ((uint16_t)0x0000)            /*!< PA[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PB                ((uint16_t)0x0010)            /*!< PB[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PC                ((uint16_t)0x0020)            /*!< PC[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PD                ((uint16_t)0x0030)            /*!< PD[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PE                ((uint16_t)0x0040)            /*!< PE[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PF                ((uint16_t)0x0050)            /*!< PF[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI5_PG                ((uint16_t)0x0060)            /*!< PG[5] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PA                ((uint16_t)0x0000)            /*!< PA[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PB                ((uint16_t)0x0100)            /*!< PB[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PC                ((uint16_t)0x0200)            /*!< PC[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PD                ((uint16_t)0x0300)            /*!< PD[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PE                ((uint16_t)0x0400)            /*!< PE[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PF                ((uint16_t)0x0500)            /*!< PF[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI6_PG                ((uint16_t)0x0600)            /*!< PG[6] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PA                ((uint16_t)0x0000)            /*!< PA[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PB                ((uint16_t)0x1000)            /*!< PB[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PC                ((uint16_t)0x2000)            /*!< PC[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PD                ((uint16_t)0x3000)            /*!< PD[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PE                ((uint16_t)0x4000)            /*!< PE[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PF                ((uint16_t)0x5000)            /*!< PF[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR2_EXTI7_PG                ((uint16_t)0x6000)            /*!< PG[7] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8                   ((uint16_t)0x000F)            /*!< EXTI 8 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9                   ((uint16_t)0x00F0)            /*!< EXTI 9 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10                  ((uint16_t)0x0F00)            /*!< EXTI 10 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11                  ((uint16_t)0xF000)            /*!< EXTI 11 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PA                ((uint16_t)0x0000)            /*!< PA[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PB                ((uint16_t)0x0001)            /*!< PB[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PC                ((uint16_t)0x0002)            /*!< PC[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PD                ((uint16_t)0x0003)            /*!< PD[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PE                ((uint16_t)0x0004)            /*!< PE[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PF                ((uint16_t)0x0005)            /*!< PF[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI8_PG                ((uint16_t)0x0006)            /*!< PG[8] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PA                ((uint16_t)0x0000)            /*!< PA[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PB                ((uint16_t)0x0010)            /*!< PB[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PC                ((uint16_t)0x0020)            /*!< PC[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PD                ((uint16_t)0x0030)            /*!< PD[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PE                ((uint16_t)0x0040)            /*!< PE[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PF                ((uint16_t)0x0050)            /*!< PF[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI9_PG                ((uint16_t)0x0060)            /*!< PG[9] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PA               ((uint16_t)0x0000)            /*!< PA[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PB               ((uint16_t)0x0100)            /*!< PB[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PC               ((uint16_t)0x0200)            /*!< PC[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PD               ((uint16_t)0x0300)            /*!< PD[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PE               ((uint16_t)0x0400)            /*!< PE[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PF               ((uint16_t)0x0500)            /*!< PF[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI10_PG               ((uint16_t)0x0600)            /*!< PG[10] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PA               ((uint16_t)0x0000)            /*!< PA[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PB               ((uint16_t)0x1000)            /*!< PB[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PC               ((uint16_t)0x2000)            /*!< PC[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PD               ((uint16_t)0x3000)            /*!< PD[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PE               ((uint16_t)0x4000)            /*!< PE[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PF               ((uint16_t)0x5000)            /*!< PF[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR3_EXTI11_PG               ((uint16_t)0x6000)            /*!< PG[11] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12                  ((uint16_t)0x000F)            /*!< EXTI 12 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13                  ((uint16_t)0x00F0)            /*!< EXTI 13 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14                  ((uint16_t)0x0F00)            /*!< EXTI 14 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15                  ((uint16_t)0xF000)            /*!< EXTI 15 configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PA               ((uint16_t)0x0000)            /*!< PA[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PB               ((uint16_t)0x0001)            /*!< PB[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PC               ((uint16_t)0x0002)            /*!< PC[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PD               ((uint16_t)0x0003)            /*!< PD[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PE               ((uint16_t)0x0004)            /*!< PE[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PF               ((uint16_t)0x0005)            /*!< PF[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI12_PG               ((uint16_t)0x0006)            /*!< PG[12] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PA               ((uint16_t)0x0000)            /*!< PA[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PB               ((uint16_t)0x0010)            /*!< PB[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PC               ((uint16_t)0x0020)            /*!< PC[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PD               ((uint16_t)0x0030)            /*!< PD[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PE               ((uint16_t)0x0040)            /*!< PE[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PF               ((uint16_t)0x0050)            /*!< PF[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI13_PG               ((uint16_t)0x0060)            /*!< PG[13] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PA               ((uint16_t)0x0000)            /*!< PA[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PB               ((uint16_t)0x0100)            /*!< PB[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PC               ((uint16_t)0x0200)            /*!< PC[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PD               ((uint16_t)0x0300)            /*!< PD[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PE               ((uint16_t)0x0400)            /*!< PE[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PF               ((uint16_t)0x0500)            /*!< PF[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI14_PG               ((uint16_t)0x0600)            /*!< PG[14] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PA               ((uint16_t)0x0000)            /*!< PA[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PB               ((uint16_t)0x1000)            /*!< PB[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PC               ((uint16_t)0x2000)            /*!< PC[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PD               ((uint16_t)0x3000)            /*!< PD[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PE               ((uint16_t)0x4000)            /*!< PE[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PF               ((uint16_t)0x5000)            /*!< PF[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define AFIO_EXTICR4_EXTI15_PG               ((uint16_t)0x6000)            /*!< PG[15] pin */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SCB_CCR_NONBASETHRDENA              ((uint16_t)0x0001)            /*!< Thread mode can be entered from any level in Handler mode by controlled return value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SCB_CCR_USERSETMPEND                ((uint16_t)0x0002)            /*!< Enables user code to write the Software Trigger Interrupt register to trigger (pend) a Main exception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SCB_CCR_UNALIGN_TRP                 ((uint16_t)0x0008)            /*!< Trap for unaligned access */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SCB_CCR_DIV_0_TRP                   ((uint16_t)0x0010)            /*!< Trap on Divide by 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SCB_CCR_BFHFNMIGN                   ((uint16_t)0x0100)            /*!< Handlers running at priority -1 and -2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SCB_CCR_STKALIGN                    ((uint16_t)0x0200)            /*!< On exception entry, the SP used prior to the exception is adjusted to be 8-byte aligned */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_EN                         ((uint16_t)0x0001)            /*!< Channel enable*/
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PSIZE                      ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits(Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR1_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_EN                         ((uint16_t)0x0001)            /*!< Channel enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PSIZE                      ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR2_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_EN                         ((uint16_t)0x0001)            /*!< Channel enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PSIZE                      ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR3_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_EN                         ((uint16_t)0x0001)            /*!< Channel enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PSIZE                      ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR4_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_EN                         ((uint16_t)0x0001)            /*!< Channel enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PSIZE                      ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR5_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_EN                         ((uint16_t)0x0001)            /*!< Channel enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PSIZE                      ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR6_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_EN                         ((uint16_t)0x0001)            /*!< Channel enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_TCIE                       ((uint16_t)0x0002)            /*!< Transfer complete interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_HTIE                       ((uint16_t)0x0004)            /*!< Half Transfer interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_TEIE                       ((uint16_t)0x0008)            /*!< Transfer error interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_DIR                        ((uint16_t)0x0010)            /*!< Data transfer direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_CIRC                       ((uint16_t)0x0020)            /*!< Circular mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PINC                       ((uint16_t)0x0040)            /*!< Peripheral increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_MINC                       ((uint16_t)0x0080)            /*!< Memory increment mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PSIZE            ,         ((uint16_t)0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PSIZE_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PSIZE_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_MSIZE                      ((uint16_t)0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_MSIZE_0                    ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_MSIZE_1                    ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PL                         ((uint16_t)0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PL_0                       ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_PL_1                       ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CCR7_MEM2MEM                    ((uint16_t)0x4000)            /*!< Memory to memory mode enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR1_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR2_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR3_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR4_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR5_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR6_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DMA_CNDTR7_NDT                      ((uint16_t)0xFFFF)            /*!< Number of data to Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JOFR1_JOFFSET1                  ((uint16_t)0x0FFF)            /*!< Data offset for injected channel 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JOFR2_JOFFSET2                  ((uint16_t)0x0FFF)            /*!< Data offset for injected channel 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JOFR3_JOFFSET3                  ((uint16_t)0x0FFF)            /*!< Data offset for injected channel 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JOFR4_JOFFSET4                  ((uint16_t)0x0FFF)            /*!< Data offset for injected channel 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_HTR_HT                          ((uint16_t)0x0FFF)            /*!< Analog watchdog high threshold */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_LTR_LT                          ((uint16_t)0x0FFF)            /*!< Analog watchdog low threshold */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JDR1_JDATA                      ((uint16_t)0xFFFF)            /*!< Injected data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JDR2_JDATA                      ((uint16_t)0xFFFF)            /*!< Injected data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JDR3_JDATA                      ((uint16_t)0xFFFF)            /*!< Injected data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  ADC_JDR4_JDATA                      ((uint16_t)0xFFFF)            /*!< Injected data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DHR12R1_DACC1DHR                ((uint16_t)0x0FFF)            /*!< DAC channel1 12-bit Right aligned data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DHR12L1_DACC1DHR                ((uint16_t)0xFFF0)            /*!< DAC channel1 12-bit Left aligned data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DHR12R2_DACC2DHR                ((uint16_t)0x0FFF)            /*!< DAC channel2 12-bit Right aligned data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DHR12L2_DACC2DHR                ((uint16_t)0xFFF0)            /*!< DAC channel2 12-bit Left aligned data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DHR8RD_DACC1DHR                 ((uint16_t)0x00FF)            /*!< DAC channel1 8-bit Right aligned data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DHR8RD_DACC2DHR                 ((uint16_t)0xFF00)            /*!< DAC channel2 8-bit Right aligned data */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DOR1_DACC1DOR                   ((uint16_t)0x0FFF)            /*!< DAC channel1 data output */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  DAC_DOR2_DACC2DOR                   ((uint16_t)0x0FFF)            /*!< DAC channel2 data output */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CFGR_PE              ((uint16_t)0x0001)     /*!<  Peripheral Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CFGR_IE              ((uint16_t)0x0002)     /*!<  Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CFGR_BTEM            ((uint16_t)0x0004)     /*!<  Bit Timing Error Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CFGR_BPEM            ((uint16_t)0x0008)     /*!<  Bit Period Error Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_OAR_OA               ((uint16_t)0x000F)     /*!<  OA[3:0]: Own Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_OAR_OA_0             ((uint16_t)0x0001)     /*!<  Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_OAR_OA_1             ((uint16_t)0x0002)     /*!<  Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_OAR_OA_2             ((uint16_t)0x0004)     /*!<  Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_OAR_OA_3             ((uint16_t)0x0008)     /*!<  Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_PRES_PRES            ((uint16_t)0x3FFF)   /*!<  Prescaler Counter Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_BTE              ((uint16_t)0x0001)     /*!<  Bit Timing Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_BPE              ((uint16_t)0x0002)     /*!<  Bit Period Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_RBTFE            ((uint16_t)0x0004)     /*!<  Rx Block Transfer Finished Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_SBE              ((uint16_t)0x0008)     /*!<  Start Bit Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_ACKE             ((uint16_t)0x0010)     /*!<  Block Acknowledge Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_LINE             ((uint16_t)0x0020)     /*!<  Line Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_ESR_TBTFE            ((uint16_t)0x0040)     /*!<  Tx Block Transfer Finished Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_TSOM             ((uint16_t)0x0001)     /*!<  Tx Start Of Message */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_TEOM             ((uint16_t)0x0002)     /*!<  Tx End Of Message */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_TERR             ((uint16_t)0x0004)     /*!<  Tx Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_TBTRF            ((uint16_t)0x0008)     /*!<  Tx Byte Transfer Request or Block Transfer Finished */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_RSOM             ((uint16_t)0x0010)     /*!<  Rx Start Of Message */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_REOM             ((uint16_t)0x0020)     /*!<  Rx End Of Message */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_RERR             ((uint16_t)0x0040)     /*!<  Rx Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_CSR_RBTF             ((uint16_t)0x0080)     /*!<  Rx Block Transfer Finished */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_TXD_TXD              ((uint16_t)0x00FF)     /*!<  Tx Data register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CEC_RXD_RXD              ((uint16_t)0x00FF)     /*!<  Rx Data register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CEN                         ((uint16_t)0x0001)            /*!< Counter enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_UDIS                        ((uint16_t)0x0002)            /*!< Update disable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_URS                         ((uint16_t)0x0004)            /*!< Update request source */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_OPM                         ((uint16_t)0x0008)            /*!< One pulse mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_DIR                         ((uint16_t)0x0010)            /*!< Direction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CMS                         ((uint16_t)0x0060)            /*!< CMS[1:0] bits (Center-aligned mode selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CMS_0                       ((uint16_t)0x0020)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CMS_1                       ((uint16_t)0x0040)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_ARPE                        ((uint16_t)0x0080)            /*!< Auto-reload preload enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CKD                         ((uint16_t)0x0300)            /*!< CKD[1:0] bits (clock division) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CKD_0                       ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR1_CKD_1                       ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_CCPC                        ((uint16_t)0x0001)            /*!< Capture/Compare Preloaded Control */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_CCUS                        ((uint16_t)0x0004)            /*!< Capture/Compare Control Update Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_CCDS                        ((uint16_t)0x0008)            /*!< Capture/Compare DMA Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_MMS                         ((uint16_t)0x0070)            /*!< MMS[2:0] bits (Master Mode Selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_MMS_0                       ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_MMS_1                       ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_MMS_2                       ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_TI1S                        ((uint16_t)0x0080)            /*!< TI1 Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS1                        ((uint16_t)0x0100)            /*!< Output Idle state 1 (OC1 output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS1N                       ((uint16_t)0x0200)            /*!< Output Idle state 1 (OC1N output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS2                        ((uint16_t)0x0400)            /*!< Output Idle state 2 (OC2 output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS2N                       ((uint16_t)0x0800)            /*!< Output Idle state 2 (OC2N output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS3                        ((uint16_t)0x1000)            /*!< Output Idle state 3 (OC3 output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS3N                       ((uint16_t)0x2000)            /*!< Output Idle state 3 (OC3N output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CR2_OIS4                        ((uint16_t)0x4000)            /*!< Output Idle state 4 (OC4 output) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_SMS                        ((uint16_t)0x0007)            /*!< SMS[2:0] bits (Slave mode selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_SMS_0                      ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_SMS_1                      ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_SMS_2                      ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_TS                         ((uint16_t)0x0070)            /*!< TS[2:0] bits (Trigger selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_TS_0                       ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_TS_1                       ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_TS_2                       ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_MSM                        ((uint16_t)0x0080)            /*!< Master/slave mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETF                        ((uint16_t)0x0F00)            /*!< ETF[3:0] bits (External trigger filter) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETF_0                      ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETF_1                      ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETF_2                      ((uint16_t)0x0400)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETF_3                      ((uint16_t)0x0800)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETPS                       ((uint16_t)0x3000)            /*!< ETPS[1:0] bits (External trigger prescaler) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETPS_0                     ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETPS_1                     ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ECE                        ((uint16_t)0x4000)            /*!< External clock enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SMCR_ETP                        ((uint16_t)0x8000)            /*!< External trigger polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_UIE                        ((uint16_t)0x0001)            /*!< Update interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC1IE                      ((uint16_t)0x0002)            /*!< Capture/Compare 1 interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC2IE                      ((uint16_t)0x0004)            /*!< Capture/Compare 2 interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC3IE                      ((uint16_t)0x0008)            /*!< Capture/Compare 3 interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC4IE                      ((uint16_t)0x0010)            /*!< Capture/Compare 4 interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_COMIE                      ((uint16_t)0x0020)            /*!< COM interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_TIE                        ((uint16_t)0x0040)            /*!< Trigger interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_BIE                        ((uint16_t)0x0080)            /*!< Break interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_UDE                        ((uint16_t)0x0100)            /*!< Update DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC1DE                      ((uint16_t)0x0200)            /*!< Capture/Compare 1 DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC2DE                      ((uint16_t)0x0400)            /*!< Capture/Compare 2 DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC3DE                      ((uint16_t)0x0800)            /*!< Capture/Compare 3 DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_CC4DE                      ((uint16_t)0x1000)            /*!< Capture/Compare 4 DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000)            /*!< COM DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DIER_TDE                        ((uint16_t)0x4000)            /*!< Trigger DMA request enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_UIF                          ((uint16_t)0x0001)            /*!< Update interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC1IF                        ((uint16_t)0x0002)            /*!< Capture/Compare 1 interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC2IF                        ((uint16_t)0x0004)            /*!< Capture/Compare 2 interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC3IF                        ((uint16_t)0x0008)            /*!< Capture/Compare 3 interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC4IF                        ((uint16_t)0x0010)            /*!< Capture/Compare 4 interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_COMIF                        ((uint16_t)0x0020)            /*!< COM interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_TIF                          ((uint16_t)0x0040)            /*!< Trigger interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_BIF                          ((uint16_t)0x0080)            /*!< Break interrupt Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC1OF                        ((uint16_t)0x0200)            /*!< Capture/Compare 1 Overcapture Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC2OF                        ((uint16_t)0x0400)            /*!< Capture/Compare 2 Overcapture Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC3OF                        ((uint16_t)0x0800)            /*!< Capture/Compare 3 Overcapture Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_SR_CC4OF                        ((uint16_t)0x1000)            /*!< Capture/Compare 4 Overcapture Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_CC1S                      ((uint16_t)0x0003)            /*!< CC1S[1:0] bits (Capture/Compare 1 Selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_CC1S_0                    ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_CC1S_1                    ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1FE                     ((uint16_t)0x0004)            /*!< Output Compare 1 Fast enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1PE                     ((uint16_t)0x0008)            /*!< Output Compare 1 Preload enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1M                      ((uint16_t)0x0070)            /*!< OC1M[2:0] bits (Output Compare 1 Mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1M_0                    ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1M_1                    ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1M_2                    ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC1CE                     ((uint16_t)0x0080)            /*!< Output Compare 1Clear Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_CC2S                      ((uint16_t)0x0300)            /*!< CC2S[1:0] bits (Capture/Compare 2 Selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_CC2S_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_CC2S_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2FE                     ((uint16_t)0x0400)            /*!< Output Compare 2 Fast enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2PE                     ((uint16_t)0x0800)            /*!< Output Compare 2 Preload enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2M                      ((uint16_t)0x7000)            /*!< OC2M[2:0] bits (Output Compare 2 Mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2M_0                    ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2M_1                    ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2M_2                    ((uint16_t)0x4000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_OC2CE                     ((uint16_t)0x8000)            /*!< Output Compare 2 Clear Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1PSC                    ((uint16_t)0x000C)            /*!< IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1PSC_0                  ((uint16_t)0x0004)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1PSC_1                  ((uint16_t)0x0008)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1F                      ((uint16_t)0x00F0)            /*!< IC1F[3:0] bits (Input Capture 1 Filter) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1F_0                    ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1F_1                    ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1F_2                    ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC1F_3                    ((uint16_t)0x0080)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2PSC                    ((uint16_t)0x0C00)            /*!< IC2PSC[1:0] bits (Input Capture 2 Prescaler) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2PSC_0                  ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2PSC_1                  ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2F                      ((uint16_t)0xF000)            /*!< IC2F[3:0] bits (Input Capture 2 Filter) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2F_0                    ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2F_1                    ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2F_2                    ((uint16_t)0x4000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR1_IC2F_3                    ((uint16_t)0x8000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_CC3S                      ((uint16_t)0x0003)            /*!< CC3S[1:0] bits (Capture/Compare 3 Selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_CC3S_0                    ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_CC3S_1                    ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3FE                     ((uint16_t)0x0004)            /*!< Output Compare 3 Fast enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3PE                     ((uint16_t)0x0008)            /*!< Output Compare 3 Preload enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3M                      ((uint16_t)0x0070)            /*!< OC3M[2:0] bits (Output Compare 3 Mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3M_0                    ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3M_1                    ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3M_2                    ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC3CE                     ((uint16_t)0x0080)            /*!< Output Compare 3 Clear Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_CC4S                      ((uint16_t)0x0300)            /*!< CC4S[1:0] bits (Capture/Compare 4 Selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_CC4S_0                    ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_CC4S_1                    ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4FE                     ((uint16_t)0x0400)            /*!< Output Compare 4 Fast enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4PE                     ((uint16_t)0x0800)            /*!< Output Compare 4 Preload enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4M                      ((uint16_t)0x7000)            /*!< OC4M[2:0] bits (Output Compare 4 Mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4M_0                    ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4M_1                    ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4M_2                    ((uint16_t)0x4000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_OC4CE                     ((uint16_t)0x8000)            /*!< Output Compare 4 Clear Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3PSC                    ((uint16_t)0x000C)            /*!< IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3PSC_0                  ((uint16_t)0x0004)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3PSC_1                  ((uint16_t)0x0008)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3F                      ((uint16_t)0x00F0)            /*!< IC3F[3:0] bits (Input Capture 3 Filter) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3F_0                    ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3F_1                    ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3F_2                    ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC3F_3                    ((uint16_t)0x0080)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4PSC                    ((uint16_t)0x0C00)            /*!< IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4PSC_0                  ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4PSC_1                  ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4F                      ((uint16_t)0xF000)            /*!< IC4F[3:0] bits (Input Capture 4 Filter) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4F_0                    ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4F_1                    ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4F_2                    ((uint16_t)0x4000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCMR2_IC4F_3                    ((uint16_t)0x8000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC1E                       ((uint16_t)0x0001)            /*!< Capture/Compare 1 output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC1P                       ((uint16_t)0x0002)            /*!< Capture/Compare 1 output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC1NE                      ((uint16_t)0x0004)            /*!< Capture/Compare 1 Complementary output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC1NP                      ((uint16_t)0x0008)            /*!< Capture/Compare 1 Complementary output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC2E                       ((uint16_t)0x0010)            /*!< Capture/Compare 2 output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC2P                       ((uint16_t)0x0020)            /*!< Capture/Compare 2 output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC2NE                      ((uint16_t)0x0040)            /*!< Capture/Compare 2 Complementary output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC2NP                      ((uint16_t)0x0080)            /*!< Capture/Compare 2 Complementary output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC3E                       ((uint16_t)0x0100)            /*!< Capture/Compare 3 output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC3P                       ((uint16_t)0x0200)            /*!< Capture/Compare 3 output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC3NE                      ((uint16_t)0x0400)            /*!< Capture/Compare 3 Complementary output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC3NP                      ((uint16_t)0x0800)            /*!< Capture/Compare 3 Complementary output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC4E                       ((uint16_t)0x1000)            /*!< Capture/Compare 4 output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC4P                       ((uint16_t)0x2000)            /*!< Capture/Compare 4 output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCER_CC4NP                      ((uint16_t)0x8000)            /*!< Capture/Compare 4 Complementary output Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CNT_CNT                         ((uint16_t)0xFFFF)            /*!< Counter Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_PSC_PSC                         ((uint16_t)0xFFFF)            /*!< Prescaler Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_ARR_ARR                         ((uint16_t)0xFFFF)            /*!< actual auto-reload Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCR1_CCR1                       ((uint16_t)0xFFFF)            /*!< Capture/Compare 1 Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCR2_CCR2                       ((uint16_t)0xFFFF)            /*!< Capture/Compare 2 Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCR3_CCR3                       ((uint16_t)0xFFFF)            /*!< Capture/Compare 3 Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_CCR4_CCR4                       ((uint16_t)0xFFFF)            /*!< Capture/Compare 4 Value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG                        ((uint16_t)0x00FF)            /*!< DTG[0:7] bits (Dead-Time Generator set-up) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_0                      ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_1                      ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_2                      ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_3                      ((uint16_t)0x0008)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_4                      ((uint16_t)0x0010)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_5                      ((uint16_t)0x0020)            /*!< Bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_6                      ((uint16_t)0x0040)            /*!< Bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_DTG_7                      ((uint16_t)0x0080)            /*!< Bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_LOCK                       ((uint16_t)0x0300)            /*!< LOCK[1:0] bits (Lock Configuration) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_LOCK_0                     ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_LOCK_1                     ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_OSSI                       ((uint16_t)0x0400)            /*!< Off-State Selection for Idle mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_OSSR                       ((uint16_t)0x0800)            /*!< Off-State Selection for Run mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_BKE                        ((uint16_t)0x1000)            /*!< Break enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_BKP                        ((uint16_t)0x2000)            /*!< Break Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_AOE                        ((uint16_t)0x4000)            /*!< Automatic Output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_BDTR_MOE                        ((uint16_t)0x8000)            /*!< Main Output enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBA                         ((uint16_t)0x001F)            /*!< DBA[4:0] bits (DMA Base Address) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBA_0                       ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBA_1                       ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBA_2                       ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBA_3                       ((uint16_t)0x0008)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBA_4                       ((uint16_t)0x0010)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBL                         ((uint16_t)0x1F00)            /*!< DBL[4:0] bits (DMA Burst Length) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBL_0                       ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBL_1                       ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBL_2                       ((uint16_t)0x0400)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBL_3                       ((uint16_t)0x0800)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DCR_DBL_4                       ((uint16_t)0x1000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  TIM_DMAR_DMAB                       ((uint16_t)0xFFFF)            /*!< DMA register for burst accesses */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_PRLH_PRL                        ((uint16_t)0x000F)            /*!< RTC Prescaler Reload Value High */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_PRLL_PRL                        ((uint16_t)0xFFFF)            /*!< RTC Prescaler Reload Value Low */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_DIVH_RTC_DIV                    ((uint16_t)0x000F)            /*!< RTC Clock Divider High */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_DIVL_RTC_DIV                    ((uint16_t)0xFFFF)            /*!< RTC Clock Divider Low */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_CNTH_RTC_CNT                    ((uint16_t)0xFFFF)            /*!< RTC Counter High */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_CNTL_RTC_CNT                    ((uint16_t)0xFFFF)            /*!< RTC Counter Low */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_ALRH_RTC_ALR                    ((uint16_t)0xFFFF)            /*!< RTC Alarm High */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  RTC_ALRL_RTC_ALR                    ((uint16_t)0xFFFF)            /*!< RTC Alarm Low */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  IWDG_KR_KEY                         ((uint16_t)0xFFFF)            /*!< Key value (write only, read 0000h) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  IWDG_RLR_RL                         ((uint16_t)0x0FFF)            /*!< Watchdog counter reload value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W                          ((uint16_t)0x007F)            /*!< W[6:0] bits (7-bit window value) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W0                         ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W1                         ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W2                         ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W3                         ((uint16_t)0x0008)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W4                         ((uint16_t)0x0010)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W5                         ((uint16_t)0x0020)            /*!< Bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_W6                         ((uint16_t)0x0040)            /*!< Bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_WDGTB                      ((uint16_t)0x0180)            /*!< WDGTB[1:0] bits (Timer Base) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_WDGTB0                     ((uint16_t)0x0080)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_WDGTB1                     ((uint16_t)0x0100)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  WWDG_CFR_EWI                        ((uint16_t)0x0200)            /*!< Early Wakeup Interrupt */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_CLKDIV                   ((uint16_t)0x00FF)            /*!< Clock divide factor */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_CLKEN                    ((uint16_t)0x0100)            /*!< Clock enable bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_PWRSAV                   ((uint16_t)0x0200)            /*!< Power saving configuration bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_BYPASS                   ((uint16_t)0x0400)            /*!< Clock divider bypass enable bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_WIDBUS                   ((uint16_t)0x1800)            /*!< WIDBUS[1:0] bits (Wide bus mode enable bit) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_WIDBUS_0                 ((uint16_t)0x0800)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_WIDBUS_1                 ((uint16_t)0x1000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_NEGEDGE                  ((uint16_t)0x2000)            /*!< SDIO_CK dephasing selection bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CLKCR_HWFC_EN                  ((uint16_t)0x4000)            /*!< HW Flow Control enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_CMDINDEX                   ((uint16_t)0x003F)            /*!< Command Index */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_WAITRESP                   ((uint16_t)0x00C0)            /*!< WAITRESP[1:0] bits (Wait for response bits) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_WAITRESP_0                 ((uint16_t)0x0040)            /*!<  Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_WAITRESP_1                 ((uint16_t)0x0080)            /*!<  Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_WAITINT                    ((uint16_t)0x0100)            /*!< CPSM Waits for Interrupt Request */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_WAITPEND                   ((uint16_t)0x0200)            /*!< CPSM Waits for ends of data transfer (CmdPend internal signal) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_CPSMEN                     ((uint16_t)0x0400)            /*!< Command path state machine (CPSM) Enable bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_SDIOSUSPEND                ((uint16_t)0x0800)            /*!< SD I/O suspend command */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_ENCMDCOMPL                 ((uint16_t)0x1000)            /*!< Enable CMD completion */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_NIEN                       ((uint16_t)0x2000)            /*!< Not Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_CMD_CEATACMD                   ((uint16_t)0x4000)            /*!< CE-ATA command */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DTEN                     ((uint16_t)0x0001)            /*!< Data transfer enabled bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DTDIR                    ((uint16_t)0x0002)            /*!< Data transfer direction selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DTMODE                   ((uint16_t)0x0004)            /*!< Data transfer mode selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DMAEN                    ((uint16_t)0x0008)            /*!< DMA enabled bit */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DBLOCKSIZE               ((uint16_t)0x00F0)            /*!< DBLOCKSIZE[3:0] bits (Data block size) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DBLOCKSIZE_0             ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DBLOCKSIZE_1             ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DBLOCKSIZE_2             ((uint16_t)0x0040)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_DBLOCKSIZE_3             ((uint16_t)0x0080)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_RWSTART                  ((uint16_t)0x0100)            /*!< Read wait start */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_RWSTOP                   ((uint16_t)0x0200)            /*!< Read wait stop */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_RWMOD                    ((uint16_t)0x0400)            /*!< Read wait mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SDIO_DCTRL_SDIOEN                   ((uint16_t)0x0800)            /*!< SD I/O enable functions */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP0R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP1R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP2R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP3R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP4R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP5R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP6R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_EA                         ((uint16_t)0x000F)            /*!< Endpoint Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_STAT_TX                    ((uint16_t)0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_STAT_TX_0                  ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_STAT_TX_1                  ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_DTOG_TX                    ((uint16_t)0x0040)            /*!< Data Toggle, for transmission transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_CTR_TX                     ((uint16_t)0x0080)            /*!< Correct Transfer for transmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_EP_KIND                    ((uint16_t)0x0100)            /*!< Endpoint Kind */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_EP_TYPE                    ((uint16_t)0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_EP_TYPE_0                  ((uint16_t)0x0200)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_EP_TYPE_1                  ((uint16_t)0x0400)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_SETUP                      ((uint16_t)0x0800)            /*!< Setup transaction completed */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_STAT_RX                    ((uint16_t)0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_STAT_RX_0                  ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_STAT_RX_1                  ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_DTOG_RX                    ((uint16_t)0x4000)            /*!< Data Toggle, for reception transfers */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_EP7R_CTR_RX                     ((uint16_t)0x8000)            /*!< Correct Transfer for reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_FRES                       ((uint16_t)0x0001)            /*!< Force USB Reset */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_PDWN                       ((uint16_t)0x0002)            /*!< Power down */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_LP_MODE                    ((uint16_t)0x0004)            /*!< Low-power mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_FSUSP                      ((uint16_t)0x0008)            /*!< Force suspend */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_RESUME                     ((uint16_t)0x0010)            /*!< Resume request */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_ESOFM                      ((uint16_t)0x0100)            /*!< Expected Start Of Frame Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_SOFM                       ((uint16_t)0x0200)            /*!< Start Of Frame Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_RESETM                     ((uint16_t)0x0400)            /*!< RESET Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_SUSPM                      ((uint16_t)0x0800)            /*!< Suspend mode Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_WKUPM                      ((uint16_t)0x1000)            /*!< Wakeup Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_ERRM                       ((uint16_t)0x2000)            /*!< Error Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_PMAOVRM                    ((uint16_t)0x4000)            /*!< Packet Memory Area Over / Underrun Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_CNTR_CTRM                       ((uint16_t)0x8000)            /*!< Correct Transfer Interrupt Mask */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_EP_ID                      ((uint16_t)0x000F)            /*!< Endpoint Identifier */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_DIR                        ((uint16_t)0x0010)            /*!< Direction of transaction */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_ESOF                       ((uint16_t)0x0100)            /*!< Expected Start Of Frame */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_SOF                        ((uint16_t)0x0200)            /*!< Start Of Frame */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_RESET                      ((uint16_t)0x0400)            /*!< USB RESET request */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_SUSP                       ((uint16_t)0x0800)            /*!< Suspend mode request */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_WKUP                       ((uint16_t)0x1000)            /*!< Wake up */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_ERR                        ((uint16_t)0x2000)            /*!< Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_PMAOVR                     ((uint16_t)0x4000)            /*!< Packet Memory Area Over / Underrun */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ISTR_CTR                        ((uint16_t)0x8000)            /*!< Correct Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_FNR_FN                          ((uint16_t)0x07FF)            /*!< Frame Number */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_FNR_LSOF                        ((uint16_t)0x1800)            /*!< Lost SOF */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_FNR_LCK                         ((uint16_t)0x2000)            /*!< Locked */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_FNR_RXDM                        ((uint16_t)0x4000)            /*!< Receive Data - Line Status */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_FNR_RXDP                        ((uint16_t)0x8000)            /*!< Receive Data + Line Status */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_BTABLE_BTABLE                   ((uint16_t)0xFFF8)            /*!< Buffer Table */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR0_TX_ADDR0_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR1_TX_ADDR1_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR2_TX_ADDR2_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR3_TX_ADDR3_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR4_TX_ADDR4_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR5_TX_ADDR5_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR6_TX_ADDR6_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR7_TX_ADDR7_TX               ((uint16_t)0xFFFE)            /*!< Transmission Buffer Address 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_TX_COUNT0_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_TX_COUNT1_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_TX_COUNT2_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_TX_COUNT3_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_TX_COUNT4_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_TX_COUNT5_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_TX_COUNT6_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_TX_COUNT7_TX             ((uint16_t)0x03FF)            /*!< Transmission Byte Count 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_TX_0_COUNT3_TX_0         ((uint16_t)0x000003FF)        /*!< Transmission Byte Count 3 (low) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_TX_1_COUNT3_TX_1         ((uint16_t)0x03FF0000)        /*!< Transmission Byte Count 3 (high) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR0_RX_ADDR0_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR1_RX_ADDR1_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR2_RX_ADDR2_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR3_RX_ADDR3_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR4_RX_ADDR4_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR5_RX_ADDR5_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR6_RX_ADDR6_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_ADDR7_RX_ADDR7_RX               ((uint16_t)0xFFFE)            /*!< Reception Buffer Address 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_COUNT0_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT0_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_COUNT1_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT1_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_COUNT2_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT2_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_COUNT3_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT3_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_COUNT4_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT4_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_COUNT5_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT5_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_COUNT6_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT6_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_COUNT7_RX             ((uint16_t)0x03FF)            /*!< Reception Byte Count */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_NUM_BLOCK             ((uint16_t)0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_NUM_BLOCK_0           ((uint16_t)0x0400)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_NUM_BLOCK_1           ((uint16_t)0x0800)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_NUM_BLOCK_2           ((uint16_t)0x1000)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_NUM_BLOCK_3           ((uint16_t)0x2000)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_NUM_BLOCK_4           ((uint16_t)0x4000)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USB_COUNT7_RX_BLSIZE                ((uint16_t)0x8000)            /*!< BLock SIZE */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_INRQ                        ((uint16_t)0x0001)            /*!< Initialization Request */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_SLEEP                       ((uint16_t)0x0002)            /*!< Sleep Mode Request */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_TXFP                        ((uint16_t)0x0004)            /*!< Transmit FIFO Priority */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_RFLM                        ((uint16_t)0x0008)            /*!< Receive FIFO Locked Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_NART                        ((uint16_t)0x0010)            /*!< No Automatic Retransmission */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_AWUM                        ((uint16_t)0x0020)            /*!< Automatic Wakeup Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_ABOM                        ((uint16_t)0x0040)            /*!< Automatic Bus-Off Management */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_TTCM                        ((uint16_t)0x0080)            /*!< Time Triggered Communication Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MCR_RESET                       ((uint16_t)0x8000)            /*!< CAN software master reset */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_INAK                        ((uint16_t)0x0001)            /*!< Initialization Acknowledge */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_SLAK                        ((uint16_t)0x0002)            /*!< Sleep Acknowledge */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_ERRI                        ((uint16_t)0x0004)            /*!< Error Interrupt */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_WKUI                        ((uint16_t)0x0008)            /*!< Wakeup Interrupt */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_SLAKI                       ((uint16_t)0x0010)            /*!< Sleep Acknowledge Interrupt */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_TXM                         ((uint16_t)0x0100)            /*!< Transmit Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_RXM                         ((uint16_t)0x0200)            /*!< Receive Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_SAMP                        ((uint16_t)0x0400)            /*!< Last Sample Point */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_MSR_RX                          ((uint16_t)0x0800)            /*!< CAN Rx Signal */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM                        ((uint16_t)0x3FFF)            /*!< Filter Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM0                       ((uint16_t)0x0001)            /*!< Filter Init Mode bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM1                       ((uint16_t)0x0002)            /*!< Filter Init Mode bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM2                       ((uint16_t)0x0004)            /*!< Filter Init Mode bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM3                       ((uint16_t)0x0008)            /*!< Filter Init Mode bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM4                       ((uint16_t)0x0010)            /*!< Filter Init Mode bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM5                       ((uint16_t)0x0020)            /*!< Filter Init Mode bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM6                       ((uint16_t)0x0040)            /*!< Filter Init Mode bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM7                       ((uint16_t)0x0080)            /*!< Filter Init Mode bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM8                       ((uint16_t)0x0100)            /*!< Filter Init Mode bit 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM9                       ((uint16_t)0x0200)            /*!< Filter Init Mode bit 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM10                      ((uint16_t)0x0400)            /*!< Filter Init Mode bit 10 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM11                      ((uint16_t)0x0800)            /*!< Filter Init Mode bit 11 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM12                      ((uint16_t)0x1000)            /*!< Filter Init Mode bit 12 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FM1R_FBM13                      ((uint16_t)0x2000)            /*!< Filter Init Mode bit 13 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC                        ((uint16_t)0x3FFF)            /*!< Filter Scale Configuration */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC0                       ((uint16_t)0x0001)            /*!< Filter Scale Configuration bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC1                       ((uint16_t)0x0002)            /*!< Filter Scale Configuration bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC2                       ((uint16_t)0x0004)            /*!< Filter Scale Configuration bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC3                       ((uint16_t)0x0008)            /*!< Filter Scale Configuration bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC4                       ((uint16_t)0x0010)            /*!< Filter Scale Configuration bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC5                       ((uint16_t)0x0020)            /*!< Filter Scale Configuration bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC6                       ((uint16_t)0x0040)            /*!< Filter Scale Configuration bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC7                       ((uint16_t)0x0080)            /*!< Filter Scale Configuration bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC8                       ((uint16_t)0x0100)            /*!< Filter Scale Configuration bit 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC9                       ((uint16_t)0x0200)            /*!< Filter Scale Configuration bit 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC10                      ((uint16_t)0x0400)            /*!< Filter Scale Configuration bit 10 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC11                      ((uint16_t)0x0800)            /*!< Filter Scale Configuration bit 11 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC12                      ((uint16_t)0x1000)            /*!< Filter Scale Configuration bit 12 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FS1R_FSC13                      ((uint16_t)0x2000)            /*!< Filter Scale Configuration bit 13 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA                       ((uint16_t)0x3FFF)            /*!< Filter FIFO Assignment */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA0                      ((uint16_t)0x0001)            /*!< Filter FIFO Assignment for Filter 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA1                      ((uint16_t)0x0002)            /*!< Filter FIFO Assignment for Filter 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA2                      ((uint16_t)0x0004)            /*!< Filter FIFO Assignment for Filter 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA3                      ((uint16_t)0x0008)            /*!< Filter FIFO Assignment for Filter 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA4                      ((uint16_t)0x0010)            /*!< Filter FIFO Assignment for Filter 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA5                      ((uint16_t)0x0020)            /*!< Filter FIFO Assignment for Filter 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA6                      ((uint16_t)0x0040)            /*!< Filter FIFO Assignment for Filter 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA7                      ((uint16_t)0x0080)            /*!< Filter FIFO Assignment for Filter 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA8                      ((uint16_t)0x0100)            /*!< Filter FIFO Assignment for Filter 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA9                      ((uint16_t)0x0200)            /*!< Filter FIFO Assignment for Filter 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA10                     ((uint16_t)0x0400)            /*!< Filter FIFO Assignment for Filter 10 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA11                     ((uint16_t)0x0800)            /*!< Filter FIFO Assignment for Filter 11 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA12                     ((uint16_t)0x1000)            /*!< Filter FIFO Assignment for Filter 12 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FFA1R_FFA13                     ((uint16_t)0x2000)            /*!< Filter FIFO Assignment for Filter 13 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT                       ((uint16_t)0x3FFF)            /*!< Filter Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT0                      ((uint16_t)0x0001)            /*!< Filter 0 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT1                      ((uint16_t)0x0002)            /*!< Filter 1 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT2                      ((uint16_t)0x0004)            /*!< Filter 2 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT3                      ((uint16_t)0x0008)            /*!< Filter 3 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT4                      ((uint16_t)0x0010)            /*!< Filter 4 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT5                      ((uint16_t)0x0020)            /*!< Filter 5 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT6                      ((uint16_t)0x0040)            /*!< Filter 6 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT7                      ((uint16_t)0x0080)            /*!< Filter 7 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT8                      ((uint16_t)0x0100)            /*!< Filter 8 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT9                      ((uint16_t)0x0200)            /*!< Filter 9 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT10                     ((uint16_t)0x0400)            /*!< Filter 10 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT11                     ((uint16_t)0x0800)            /*!< Filter 11 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT12                     ((uint16_t)0x1000)            /*!< Filter 12 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  CAN_FA1R_FACT13                     ((uint16_t)0x2000)            /*!< Filter 13 Active */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_CPHA                        ((uint16_t)0x0001)            /*!< Clock Phase */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_CPOL                        ((uint16_t)0x0002)            /*!< Clock Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_MSTR                        ((uint16_t)0x0004)            /*!< Master Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_BR                          ((uint16_t)0x0038)            /*!< BR[2:0] bits (Baud Rate Control) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_BR_0                        ((uint16_t)0x0008)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_BR_1                        ((uint16_t)0x0010)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_BR_2                        ((uint16_t)0x0020)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_SPE                         ((uint16_t)0x0040)            /*!< SPI Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_LSBFIRST                    ((uint16_t)0x0080)            /*!< Frame Format */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_SSI                         ((uint16_t)0x0100)            /*!< Internal slave select */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_SSM                         ((uint16_t)0x0200)            /*!< Software slave management */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_RXONLY                      ((uint16_t)0x0400)            /*!< Receive only */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_DFF                         ((uint16_t)0x0800)            /*!< Data Frame Format */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_CRCNEXT                     ((uint16_t)0x1000)            /*!< Transmit CRC next */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_CRCEN                       ((uint16_t)0x2000)            /*!< Hardware CRC calculation enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_BIDIOE                      ((uint16_t)0x4000)            /*!< Output enable in bidirectional mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CR1_BIDIMODE                    ((uint16_t)0x8000)            /*!< Bidirectional data mode enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_DR_DR                           ((uint16_t)0xFFFF)            /*!< Data Register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_CRCPR_CRCPOLY                   ((uint16_t)0xFFFF)            /*!< CRC polynomial register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_RXCRCR_RXCRC                    ((uint16_t)0xFFFF)            /*!< Rx CRC Register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_TXCRCR_TXCRC                    ((uint16_t)0xFFFF)            /*!< Tx CRC Register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_CHLEN                   ((uint16_t)0x0001)            /*!< Channel length (number of bits per audio channel) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_DATLEN                  ((uint16_t)0x0006)            /*!< DATLEN[1:0] bits (Data length to be transferred) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_DATLEN_0                ((uint16_t)0x0002)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_DATLEN_1                ((uint16_t)0x0004)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_CKPOL                   ((uint16_t)0x0008)            /*!< steady state clock polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SSTD                  ((uint16_t)0x0030)            /*!< I2SSTD[1:0] bits (I2S standard selection) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SSTD_0                ((uint16_t)0x0010)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SSTD_1                ((uint16_t)0x0020)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_PCMSYNC                 ((uint16_t)0x0080)            /*!< PCM frame synchronization */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SCFG                  ((uint16_t)0x0300)            /*!< I2SCFG[1:0] bits (I2S configuration mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SCFG_0                ((uint16_t)0x0100)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SCFG_1                ((uint16_t)0x0200)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SE                    ((uint16_t)0x0400)            /*!< I2S Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SCFGR_I2SMOD                  ((uint16_t)0x0800)            /*!< I2S mode selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SPR_I2SDIV                    ((uint16_t)0x00FF)            /*!< I2S Linear prescaler */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SPR_ODD                       ((uint16_t)0x0100)            /*!< Odd factor for the prescaler */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  SPI_I2SPR_MCKOE                     ((uint16_t)0x0200)            /*!< Master Clock Output Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_PE                          ((uint16_t)0x0001)            /*!< Peripheral Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_SMBUS                       ((uint16_t)0x0002)            /*!< SMBus Mode */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_SMBTYPE                     ((uint16_t)0x0008)            /*!< SMBus Type */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_ENARP                       ((uint16_t)0x0010)            /*!< ARP Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_ENPEC                       ((uint16_t)0x0020)            /*!< PEC Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_ENGC                        ((uint16_t)0x0040)            /*!< General Call Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_NOSTRETCH                   ((uint16_t)0x0080)            /*!< Clock Stretching Disable (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_START                       ((uint16_t)0x0100)            /*!< Start Generation */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_STOP                        ((uint16_t)0x0200)            /*!< Stop Generation */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_ACK                         ((uint16_t)0x0400)            /*!< Acknowledge Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_POS                         ((uint16_t)0x0800)            /*!< Acknowledge/PEC Position (for data reception) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_PEC                         ((uint16_t)0x1000)            /*!< Packet Error Checking */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_ALERT                       ((uint16_t)0x2000)            /*!< SMBus Alert */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR1_SWRST                       ((uint16_t)0x8000)            /*!< Software Reset */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ                        ((uint16_t)0x003F)            /*!< FREQ[5:0] bits (Peripheral Clock Frequency) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ_0                      ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ_1                      ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ_2                      ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ_3                      ((uint16_t)0x0008)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ_4                      ((uint16_t)0x0010)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_FREQ_5                      ((uint16_t)0x0020)            /*!< Bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_ITERREN                     ((uint16_t)0x0100)            /*!< Error Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_ITEVTEN                     ((uint16_t)0x0200)            /*!< Event Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_ITBUFEN                     ((uint16_t)0x0400)            /*!< Buffer Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_DMAEN                       ((uint16_t)0x0800)            /*!< DMA Requests Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CR2_LAST                        ((uint16_t)0x1000)            /*!< DMA Last Transfer */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD1_7                     ((uint16_t)0x00FE)            /*!< Interface Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD8_9                     ((uint16_t)0x0300)            /*!< Interface Address */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD0                       ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD1                       ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD2                       ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD3                       ((uint16_t)0x0008)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD4                       ((uint16_t)0x0010)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD5                       ((uint16_t)0x0020)            /*!< Bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD6                       ((uint16_t)0x0040)            /*!< Bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD7                       ((uint16_t)0x0080)            /*!< Bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD8                       ((uint16_t)0x0100)            /*!< Bit 8 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADD9                       ((uint16_t)0x0200)            /*!< Bit 9 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_OAR1_ADDMODE                    ((uint16_t)0x8000)            /*!< Addressing Mode (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_SB                          ((uint16_t)0x0001)            /*!< Start Bit (Master mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_ADDR                        ((uint16_t)0x0002)            /*!< Address sent (master mode)/matched (slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_BTF                         ((uint16_t)0x0004)            /*!< Byte Transfer Finished */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_ADD10                       ((uint16_t)0x0008)            /*!< 10-bit header sent (Master mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_STOPF                       ((uint16_t)0x0010)            /*!< Stop detection (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_RXNE                        ((uint16_t)0x0040)            /*!< Data Register not Empty (receivers) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_TXE                         ((uint16_t)0x0080)            /*!< Data Register Empty (transmitters) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_BERR                        ((uint16_t)0x0100)            /*!< Bus Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_ARLO                        ((uint16_t)0x0200)            /*!< Arbitration Lost (master mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_AF                          ((uint16_t)0x0400)            /*!< Acknowledge Failure */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_OVR                         ((uint16_t)0x0800)            /*!< Overrun/Underrun */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_PECERR                      ((uint16_t)0x1000)            /*!< PEC Error in reception */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_TIMEOUT                     ((uint16_t)0x4000)            /*!< Timeout or Tlow Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR1_SMBALERT                    ((uint16_t)0x8000)            /*!< SMBus Alert */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_MSL                         ((uint16_t)0x0001)            /*!< Master/Slave */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_BUSY                        ((uint16_t)0x0002)            /*!< Bus Busy */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_TRA                         ((uint16_t)0x0004)            /*!< Transmitter/Receiver */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_GENCALL                     ((uint16_t)0x0010)            /*!< General Call Address (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_SMBDEFAULT                  ((uint16_t)0x0020)            /*!< SMBus Device Default Address (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_SMBHOST                     ((uint16_t)0x0040)            /*!< SMBus Host Header (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_DUALF                       ((uint16_t)0x0080)            /*!< Dual Flag (Slave mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_SR2_PEC                         ((uint16_t)0xFF00)            /*!< Packet Error Checking Register */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CCR_CCR                         ((uint16_t)0x0FFF)            /*!< Clock Control Register in Fast/Standard mode (Master mode) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CCR_DUTY                        ((uint16_t)0x4000)            /*!< Fast Mode Duty Cycle */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  I2C_CCR_FS                          ((uint16_t)0x8000)            /*!< I2C Master Mode Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_PE                         ((uint16_t)0x0001)            /*!< Parity Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_FE                         ((uint16_t)0x0002)            /*!< Framing Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_NE                         ((uint16_t)0x0004)            /*!< Noise Error Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_ORE                        ((uint16_t)0x0008)            /*!< OverRun Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_IDLE                       ((uint16_t)0x0010)            /*!< IDLE line detected */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_RXNE                       ((uint16_t)0x0020)            /*!< Read Data Register Not Empty */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_TC                         ((uint16_t)0x0040)            /*!< Transmission Complete */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_TXE                        ((uint16_t)0x0080)            /*!< Transmit Data Register Empty */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_LBD                        ((uint16_t)0x0100)            /*!< LIN Break Detection Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_SR_CTS                        ((uint16_t)0x0200)            /*!< CTS Flag */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_DR_DR                         ((uint16_t)0x01FF)            /*!< Data value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_BRR_DIV_Fraction              ((uint16_t)0x000F)            /*!< Fraction of USARTDIV */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_BRR_DIV_Mantissa              ((uint16_t)0xFFF0)            /*!< Mantissa of USARTDIV */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_SBK                       ((uint16_t)0x0001)            /*!< Send Break */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_RWU                       ((uint16_t)0x0002)            /*!< Receiver wakeup */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_RE                        ((uint16_t)0x0004)            /*!< Receiver Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_TE                        ((uint16_t)0x0008)            /*!< Transmitter Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_IDLEIE                    ((uint16_t)0x0010)            /*!< IDLE Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_RXNEIE                    ((uint16_t)0x0020)            /*!< RXNE Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_TCIE                      ((uint16_t)0x0040)            /*!< Transmission Complete Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_TXEIE                     ((uint16_t)0x0080)            /*!< PE Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_PEIE                      ((uint16_t)0x0100)            /*!< PE Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_PS                        ((uint16_t)0x0200)            /*!< Parity Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_PCE                       ((uint16_t)0x0400)            /*!< Parity Control Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_WAKE                      ((uint16_t)0x0800)            /*!< Wakeup method */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_M                         ((uint16_t)0x1000)            /*!< Word length */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_UE                        ((uint16_t)0x2000)            /*!< USART Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR1_OVER8                     ((uint16_t)0x8000)            /*!< USART Oversmapling 8-bits */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_ADD                       ((uint16_t)0x000F)            /*!< Address of the USART node */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_LBDL                      ((uint16_t)0x0020)            /*!< LIN Break Detection Length */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_LBDIE                     ((uint16_t)0x0040)            /*!< LIN Break Detection Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_LBCL                      ((uint16_t)0x0100)            /*!< Last Bit Clock pulse */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_CPHA                      ((uint16_t)0x0200)            /*!< Clock Phase */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_CPOL                      ((uint16_t)0x0400)            /*!< Clock Polarity */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_CLKEN                     ((uint16_t)0x0800)            /*!< Clock Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_STOP                      ((uint16_t)0x3000)            /*!< STOP[1:0] bits (STOP bits) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_STOP_0                    ((uint16_t)0x1000)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_STOP_1                    ((uint16_t)0x2000)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR2_LINEN                     ((uint16_t)0x4000)            /*!< LIN mode enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_EIE                       ((uint16_t)0x0001)            /*!< Error Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_IREN                      ((uint16_t)0x0002)            /*!< IrDA mode Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_IRLP                      ((uint16_t)0x0004)            /*!< IrDA Low-Power */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_HDSEL                     ((uint16_t)0x0008)            /*!< Half-Duplex Selection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_NACK                      ((uint16_t)0x0010)            /*!< Smartcard NACK enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_SCEN                      ((uint16_t)0x0020)            /*!< Smartcard mode enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_DMAR                      ((uint16_t)0x0040)            /*!< DMA Enable Receiver */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_DMAT                      ((uint16_t)0x0080)            /*!< DMA Enable Transmitter */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_RTSE                      ((uint16_t)0x0100)            /*!< RTS Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_CTSE                      ((uint16_t)0x0200)            /*!< CTS Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_CTSIE                     ((uint16_t)0x0400)            /*!< CTS Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_CR3_ONEBIT                    ((uint16_t)0x0800)            /*!< One Bit method */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC                      ((uint16_t)0x00FF)            /*!< PSC[7:0] bits (Prescaler value) */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_0                    ((uint16_t)0x0001)            /*!< Bit 0 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_1                    ((uint16_t)0x0002)            /*!< Bit 1 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_2                    ((uint16_t)0x0004)            /*!< Bit 2 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_3                    ((uint16_t)0x0008)            /*!< Bit 3 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_4                    ((uint16_t)0x0010)            /*!< Bit 4 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_5                    ((uint16_t)0x0020)            /*!< Bit 5 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_6                    ((uint16_t)0x0040)            /*!< Bit 6 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_PSC_7                    ((uint16_t)0x0080)            /*!< Bit 7 */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  USART_GTPR_GT                       ((uint16_t)0xFF00)            /*!< Guard time value */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_PG                         ((uint16_t)0x0001)            /*!< Programming */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_PER                        ((uint16_t)0x0002)            /*!< Page Erase */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_MER                        ((uint16_t)0x0004)            /*!< Mass Erase */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_OPTPG                      ((uint16_t)0x0010)            /*!< Option Byte Programming */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_OPTER                      ((uint16_t)0x0020)            /*!< Option Byte Erase */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_STRT                       ((uint16_t)0x0040)            /*!< Start */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_LOCK                       ((uint16_t)0x0080)            /*!< Lock */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_OPTWRE                     ((uint16_t)0x0200)            /*!< Option Bytes Write Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_ERRIE                      ((uint16_t)0x0400)            /*!< Error Interrupt Enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_CR_EOPIE                      ((uint16_t)0x1000)            /*!< End of operation interrupt enable */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_OPTERR                    ((uint16_t)0x0001)            /*!< Option Byte Error */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_RDPRT                     ((uint16_t)0x0002)            /*!< Read protection */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_USER                      ((uint16_t)0x03FC)            /*!< User Option Bytes */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_WDG_SW                    ((uint16_t)0x0004)            /*!< WDG_SW */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_nRST_STOP                 ((uint16_t)0x0008)            /*!< nRST_STOP */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_nRST_STDBY                ((uint16_t)0x0010)            /*!< nRST_STDBY */
stm32f10x.h (G:\0_0stm32\STM32_Template\Libraries\CMSIS):#define  FLASH_OBR_BFB2                      ((uint16_t)0x0020)            /*!< BFB2 */
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return (uint16_t) ADCx->DR;
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return (uint16_t) (*(__IO uint32_t*)  tmp);   
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                                        uint16_t LowThreshold)
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
stm32f10x_adc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define ADC_IT_EOC                                 ((uint16_t)0x0220)
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define ADC_IT_AWD                                 ((uint16_t)0x0140)
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define ADC_IT_JEOC                                ((uint16_t)0x0480)
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_ADC_IT(IT) ((((IT) & (uint16_t)0xF81F) == 0x00) && ((IT) != 0x00))
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset);
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT);
stm32f10x_adc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT);
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define RTCCR_CAL_MASK    ((uint16_t)0xFF80)
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define RTCCR_MASK        ((uint16_t)0xFC7F)
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0;
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0;
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
stm32f10x_bkp.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return (*(__IO uint16_t *) tmp);
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_TamperPinLevel_High           ((uint16_t)0x0000)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_TamperPinLevel_Low            ((uint16_t)0x0001)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_RTCOutputSource_None          ((uint16_t)0x0000)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_RTCOutputSource_CalibClock    ((uint16_t)0x0080)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_RTCOutputSource_Alarm         ((uint16_t)0x0100)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_RTCOutputSource_Second        ((uint16_t)0x0300)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR1                           ((uint16_t)0x0004)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR2                           ((uint16_t)0x0008)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR3                           ((uint16_t)0x000C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR4                           ((uint16_t)0x0010)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR5                           ((uint16_t)0x0014)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR6                           ((uint16_t)0x0018)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR7                           ((uint16_t)0x001C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR8                           ((uint16_t)0x0020)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR9                           ((uint16_t)0x0024)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR10                          ((uint16_t)0x0028)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR11                          ((uint16_t)0x0040)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR12                          ((uint16_t)0x0044)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR13                          ((uint16_t)0x0048)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR14                          ((uint16_t)0x004C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR15                          ((uint16_t)0x0050)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR16                          ((uint16_t)0x0054)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR17                          ((uint16_t)0x0058)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR18                          ((uint16_t)0x005C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR19                          ((uint16_t)0x0060)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR20                          ((uint16_t)0x0064)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR21                          ((uint16_t)0x0068)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR22                          ((uint16_t)0x006C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR23                          ((uint16_t)0x0070)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR24                          ((uint16_t)0x0074)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR25                          ((uint16_t)0x0078)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR26                          ((uint16_t)0x007C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR27                          ((uint16_t)0x0080)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR28                          ((uint16_t)0x0084)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR29                          ((uint16_t)0x0088)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR30                          ((uint16_t)0x008C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR31                          ((uint16_t)0x0090)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR32                          ((uint16_t)0x0094)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR33                          ((uint16_t)0x0098)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR34                          ((uint16_t)0x009C)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR35                          ((uint16_t)0x00A0)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR36                          ((uint16_t)0x00A4)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR37                          ((uint16_t)0x00A8)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR38                          ((uint16_t)0x00AC)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR39                          ((uint16_t)0x00B0)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR40                          ((uint16_t)0x00B4)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR41                          ((uint16_t)0x00B8)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define BKP_DR42                          ((uint16_t)0x00BC)
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel);
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource);
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data);
stm32f10x_bkp.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR);
stm32f10x_can.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CAN_Prescaler;   /*!< Specifies the length of a time quantum. 
stm32f10x_can.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CAN_FilterIdHigh;         /*!< Specifies the filter identification number (MSBs for a 32-bit
stm32f10x_can.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CAN_FilterIdLow;          /*!< Specifies the filter identification number (LSBs for a 32-bit
stm32f10x_can.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CAN_FilterMaskIdHigh;     /*!< Specifies the filter mask number or identification number,
stm32f10x_can.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CAN_FilterMaskIdLow;      /*!< Specifies the filter mask number or identification number,
stm32f10x_can.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CAN_FilterFIFOAssignment; /*!< Specifies the FIFO (0 or 1) which will be assigned to the filter.
stm32f10x_cec.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0;
stm32f10x_cec.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);
stm32f10x_cec.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void CEC_SetPrescaler(uint16_t CEC_Prescaler)
stm32f10x_cec.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void CEC_ClearITPendingBit(uint16_t CEC_IT)
stm32f10x_cec.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CEC_BitTimingMode; /*!< Configures the CEC Bit Timing Error Mode. 
stm32f10x_cec.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t CEC_BitPeriodMode; /*!< Configures the CEC Bit Period Error Mode. 
stm32f10x_cec.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define CEC_BitTimingStdMode                    ((uint16_t)0x00) /*!< Bit timing error Standard Mode */
stm32f10x_cec.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define CEC_BitPeriodStdMode                    ((uint16_t)0x00) /*!< Bit period error Standard Mode */
stm32f10x_cec.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void CEC_SetPrescaler(uint16_t CEC_Prescaler);
stm32f10x_cec.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void CEC_ClearITPendingBit(uint16_t CEC_IT);
stm32f10x_dac.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
stm32f10x_dac.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
stm32f10x_dac.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
stm32f10x_dac.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
stm32f10x_dac.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return (uint16_t) (*(__IO uint32_t*) tmp);
stm32f10x_dac.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data);
stm32f10x_dac.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data);
stm32f10x_dac.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1);
stm32f10x_dac.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel);
stm32f10x_dma.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
stm32f10x_dma.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
stm32f10x_dma.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
stm32f10x_dma.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
stm32f10x_dma.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return ((uint16_t)(DMAy_Channelx->CNDTR));
stm32f10x_dma.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber); 
stm32f10x_dma.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx);
stm32f10x_exti.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_EXTI_LINE(LINE) ((((LINE) & (uint32_t)0xFFF00000) == 0x00) && ((LINE) != (uint16_t)0x00))
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define OB_USER_BFB2             ((uint16_t)0x0008)
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define RDP_Key                  ((uint16_t)0x00A5)
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t rdptmp = RDP_Key;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      OB->RDP = (uint16_t)rdptmp; 
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*)Address = (uint16_t)Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):        *(__IO uint16_t*) tmp = Data >> 16;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*)Address = (uint16_t)Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*) tmp = Data >> 16;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*)Address = (uint16_t)Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):        *(__IO uint16_t*) tmp = Data >> 16;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    *(__IO uint16_t*)Address = (uint16_t)Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*) tmp = Data >> 16;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*)Address = Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      *(__IO uint16_t*)Address = Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    *(__IO uint16_t*)Address = Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    *(__IO uint16_t*)Address = Data;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FLASH_Status FLASH_BootConfig(uint16_t FLASH_BOOT)
stm32f10x_flash.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      OB->USER &= (uint16_t)(~(uint16_t)(OB_USER_BFB2));
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define OB_IWDG_SW                     ((uint16_t)0x0001)  /*!< Software IWDG selected */
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define OB_IWDG_HW                     ((uint16_t)0x0000)  /*!< Hardware IWDG selected */
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define OB_STOP_NoRST                  ((uint16_t)0x0002) /*!< No reset generated when entering in STOP */
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define OB_STOP_RST                    ((uint16_t)0x0000) /*!< Reset generated when entering in STOP */
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define OB_STDBY_NoRST                 ((uint16_t)0x0004) /*!< No reset generated when entering in STANDBY */
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define OB_STDBY_RST                   ((uint16_t)0x0000) /*!< Reset generated when entering in STANDBY */
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define FLASH_BOOT_Bank1  ((uint16_t)0x0000) /*!< At startup, if boot pins are set in boot from user Flash position
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define FLASH_BOOT_Bank2  ((uint16_t)0x0001) /*!< At startup, if boot pins are set in boot from user Flash position
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY);
stm32f10x_flash.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FLASH_Status FLASH_BootConfig(uint16_t FLASH_BOOT);
stm32f10x_fsmc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define EVCR_PORTPINCONFIG_MASK     ((uint16_t)0xFF80)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define LSB_MASK                    ((uint16_t)0xFFFF)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return ((uint16_t)GPIOx->IDR);
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return ((uint16_t)GPIOx->ODR);
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
stm32f10x_gpio.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t GPIO_Pin;             /*!< Specifies the GPIO pins to be configured.
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_0                 ((uint16_t)0x0001)  /*!< Pin 0 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_1                 ((uint16_t)0x0002)  /*!< Pin 1 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_2                 ((uint16_t)0x0004)  /*!< Pin 2 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_3                 ((uint16_t)0x0008)  /*!< Pin 3 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_4                 ((uint16_t)0x0010)  /*!< Pin 4 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_5                 ((uint16_t)0x0020)  /*!< Pin 5 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_6                 ((uint16_t)0x0040)  /*!< Pin 6 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_7                 ((uint16_t)0x0080)  /*!< Pin 7 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_8                 ((uint16_t)0x0100)  /*!< Pin 8 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_9                 ((uint16_t)0x0200)  /*!< Pin 9 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_10                ((uint16_t)0x0400)  /*!< Pin 10 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_11                ((uint16_t)0x0800)  /*!< Pin 11 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_12                ((uint16_t)0x1000)  /*!< Pin 12 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_13                ((uint16_t)0x2000)  /*!< Pin 13 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_14                ((uint16_t)0x4000)  /*!< Pin 14 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_15                ((uint16_t)0x8000)  /*!< Pin 15 selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define GPIO_Pin_All               ((uint16_t)0xFFFF)  /*!< All pins selected */
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_GPIO_PIN(PIN) ((((PIN) & (uint16_t)0x00) == 0x00) && ((PIN) != (uint16_t)0x00))
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);
stm32f10x_gpio.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_PE_Set              ((uint16_t)0x0001)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_PE_Reset            ((uint16_t)0xFFFE)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_START_Set           ((uint16_t)0x0100)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_START_Reset         ((uint16_t)0xFEFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_STOP_Set            ((uint16_t)0x0200)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_STOP_Reset          ((uint16_t)0xFDFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ACK_Set             ((uint16_t)0x0400)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ACK_Reset           ((uint16_t)0xFBFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ENGC_Set            ((uint16_t)0x0040)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ENGC_Reset          ((uint16_t)0xFFBF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_SWRST_Set           ((uint16_t)0x8000)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_SWRST_Reset         ((uint16_t)0x7FFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_PEC_Set             ((uint16_t)0x1000)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_PEC_Reset           ((uint16_t)0xEFFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ENPEC_Set           ((uint16_t)0x0020)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ENPEC_Reset         ((uint16_t)0xFFDF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ENARP_Set           ((uint16_t)0x0010)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_ENARP_Reset         ((uint16_t)0xFFEF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_NOSTRETCH_Set       ((uint16_t)0x0080)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_NOSTRETCH_Reset     ((uint16_t)0xFF7F)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_CLEAR_Mask          ((uint16_t)0xFBF5)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_DMAEN_Set           ((uint16_t)0x0800)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_DMAEN_Reset         ((uint16_t)0xF7FF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_LAST_Set            ((uint16_t)0x1000)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_LAST_Reset          ((uint16_t)0xEFFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_FREQ_Reset          ((uint16_t)0xFFC0)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define OAR1_ADD0_Set           ((uint16_t)0x0001)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define OAR1_ADD0_Reset         ((uint16_t)0xFFFE)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define OAR2_ENDUAL_Set         ((uint16_t)0x0001)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define OAR2_ENDUAL_Reset       ((uint16_t)0xFFFE)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define OAR2_ADD2_Reset         ((uint16_t)0xFF01)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CCR_FS_Set              ((uint16_t)0x8000)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CCR_CCR_Set             ((uint16_t)0x0FFF)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0, freqrange = 0;
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t result = 0x04;
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  freqrange = (uint16_t)(pclk1 / 1000000);
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      result |= (uint16_t)0x0001;  
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpreg |= (uint16_t)(result | CCR_FS_Set);
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0;
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    I2Cx->CR2 &= (uint16_t)~I2C_IT;
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return (*(__IO uint16_t *) tmp);
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  I2Cx->SR1 = (uint16_t)~flagpos;
stm32f10x_i2c.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  I2Cx->SR1 = (uint16_t)~flagpos;
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2C_Mode;                /*!< Specifies the I2C mode.
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2C_DutyCycle;           /*!< Specifies the I2C fast mode duty cycle.
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2C_OwnAddress1;         /*!< Specifies the first device own address.
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2C_Ack;                 /*!< Enables or disables the acknowledgement.
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2C_AcknowledgedAddress; /*!< Specifies if 7-bit or 10-bit address is acknowledged.
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_Mode_I2C                    ((uint16_t)0x0000)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_Mode_SMBusDevice            ((uint16_t)0x0002)  
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_Mode_SMBusHost              ((uint16_t)0x000A)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_DutyCycle_16_9              ((uint16_t)0x4000) /*!< I2C fast mode Tlow/Thigh = 16/9 */
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_DutyCycle_2                 ((uint16_t)0xBFFF) /*!< I2C fast mode Tlow/Thigh = 2 */
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_Ack_Enable                  ((uint16_t)0x0400)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_Ack_Disable                 ((uint16_t)0x0000)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_AcknowledgedAddress_7bit    ((uint16_t)0x4000)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_AcknowledgedAddress_10bit   ((uint16_t)0xC000)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_SMBusAlert_Low              ((uint16_t)0x2000)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_SMBusAlert_High             ((uint16_t)0xDFFF)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_PECPosition_Next            ((uint16_t)0x0800)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_PECPosition_Current         ((uint16_t)0xF7FF)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_NACKPosition_Next           ((uint16_t)0x0800)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_NACKPosition_Current        ((uint16_t)0xF7FF)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_IT_BUF                      ((uint16_t)0x0400)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_IT_EVT                      ((uint16_t)0x0200)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2C_IT_ERR                      ((uint16_t)0x0100)
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_I2C_CONFIG_IT(IT) ((((IT) & (uint16_t)0xF8FF) == 0x00) && ((IT) != 0x00))
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_I2C_CLEAR_IT(IT) ((((IT) & (uint16_t)0x20FF) == 0x00) && ((IT) != (uint16_t)0x00))
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_I2C_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0x20FF) == 0x00) && ((FLAG) != (uint16_t)0x00))
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState);
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register);
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition);
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert);
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition);
stm32f10x_i2c.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle);
stm32f10x_iwdg.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define KR_KEY_Reload    ((uint16_t)0xAAAA)
stm32f10x_iwdg.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define KR_KEY_Enable    ((uint16_t)0xCCCC)
stm32f10x_iwdg.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
stm32f10x_iwdg.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void IWDG_SetReload(uint16_t Reload)
stm32f10x_iwdg.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IWDG_WriteAccess_Enable     ((uint16_t)0x5555)
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IWDG_WriteAccess_Disable    ((uint16_t)0x0000)
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IWDG_FLAG_PVU               ((uint16_t)0x0001)
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IWDG_FLAG_RVU               ((uint16_t)0x0002)
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess);
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void IWDG_SetReload(uint16_t Reload);
stm32f10x_iwdg.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG);
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    RTC->CRH &= (uint16_t)~RTC_IT;
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmp = 0;
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void RTC_ClearFlag(uint16_t RTC_FLAG)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  RTC->CRL &= (uint16_t)~RTC_FLAG;
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):ITStatus RTC_GetITStatus(uint16_t RTC_IT)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void RTC_ClearITPendingBit(uint16_t RTC_IT)
stm32f10x_rtc.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  RTC->CRL &= (uint16_t)~RTC_IT;
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_IT_OW            ((uint16_t)0x0004)  /*!< Overflow interrupt */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_IT_ALR           ((uint16_t)0x0002)  /*!< Alarm interrupt */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_IT_SEC           ((uint16_t)0x0001)  /*!< Second interrupt */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_RTC_IT(IT) ((((IT) & (uint16_t)0xFFF8) == 0x00) && ((IT) != 0x00))
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_FLAG_RTOFF       ((uint16_t)0x0020)  /*!< RTC Operation OFF flag */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_FLAG_RSF         ((uint16_t)0x0008)  /*!< Registers Synchronized flag */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_FLAG_OW          ((uint16_t)0x0004)  /*!< Overflow flag */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_FLAG_ALR         ((uint16_t)0x0002)  /*!< Alarm flag */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define RTC_FLAG_SEC         ((uint16_t)0x0001)  /*!< Second flag */
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_RTC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFFF0) == 0x00) && ((FLAG) != 0x00))
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState);
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG);
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void RTC_ClearFlag(uint16_t RTC_FLAG);
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):ITStatus RTC_GetITStatus(uint16_t RTC_IT);
stm32f10x_rtc.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void RTC_ClearITPendingBit(uint16_t RTC_IT);
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_SPE_Set          ((uint16_t)0x0040)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_SPE_Reset        ((uint16_t)0xFFBF)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define I2SCFGR_I2SE_Set     ((uint16_t)0x0400)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define I2SCFGR_I2SE_Reset   ((uint16_t)0xFBFF)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_CRCNext_Set      ((uint16_t)0x1000)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_CRCEN_Set        ((uint16_t)0x2000)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_CRCEN_Reset      ((uint16_t)0xDFFF)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_SSOE_Set         ((uint16_t)0x0004)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_SSOE_Reset       ((uint16_t)0xFFFB)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_CLEAR_Mask       ((uint16_t)0x3040)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define SPI_Mode_Select      ((uint16_t)0xF7FF)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define I2S_Mode_Select      ((uint16_t)0x0800) 
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    i2sodd = (uint16_t)0;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    i2sdiv = (uint16_t)2;   
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    i2sodd = (uint16_t) (i2sodd << 8);
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t itpos = 0, itmask = 0 ;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  itmask = (uint16_t)1 << (uint16_t)itpos;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    SPIx->CR2 &= (uint16_t)~itmask;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t crcreg = 0;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t itpos = 0;
stm32f10x_spi.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  SPIx->SR = (uint16_t)~itpos;
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_Direction;           /*!< Specifies the SPI unidirectional or bidirectional data mode.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_Mode;                /*!< Specifies the SPI operating mode.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_DataSize;            /*!< Specifies the SPI data size.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_CPOL;                /*!< Specifies the serial clock steady state.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_CPHA;                /*!< Specifies the clock active edge for the bit capture.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_NSS;                 /*!< Specifies whether the NSS signal is managed by
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_BaudRatePrescaler;   /*!< Specifies the Baud Rate prescaler value which will be
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_FirstBit;            /*!< Specifies whether data transfers start from MSB or LSB bit.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t SPI_CRCPolynomial;       /*!< Specifies the polynomial used for the CRC calculation. */
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2S_Mode;         /*!< Specifies the I2S operating mode.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2S_Standard;     /*!< Specifies the standard used for the I2S communication.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2S_DataFormat;   /*!< Specifies the data format for the I2S communication.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2S_MCLKOutput;   /*!< Specifies whether the I2S MCLK output is enabled or not.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t I2S_CPOL;         /*!< Specifies the idle state of the I2S clock.
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Direction_2Lines_FullDuplex ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Direction_2Lines_RxOnly     ((uint16_t)0x0400)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Direction_1Line_Rx          ((uint16_t)0x8000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Direction_1Line_Tx          ((uint16_t)0xC000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Mode_Master                 ((uint16_t)0x0104)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Mode_Slave                  ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_DataSize_16b                ((uint16_t)0x0800)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_DataSize_8b                 ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_CPOL_Low                    ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_CPOL_High                   ((uint16_t)0x0002)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_CPHA_1Edge                  ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_CPHA_2Edge                  ((uint16_t)0x0001)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_NSS_Soft                    ((uint16_t)0x0200)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_NSS_Hard                    ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_2         ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_4         ((uint16_t)0x0008)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_8         ((uint16_t)0x0010)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_16        ((uint16_t)0x0018)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_32        ((uint16_t)0x0020)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_64        ((uint16_t)0x0028)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_128       ((uint16_t)0x0030)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_BaudRatePrescaler_256       ((uint16_t)0x0038)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_FirstBit_MSB                ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_FirstBit_LSB                ((uint16_t)0x0080)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Mode_SlaveTx                ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Mode_SlaveRx                ((uint16_t)0x0100)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Mode_MasterTx               ((uint16_t)0x0200)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Mode_MasterRx               ((uint16_t)0x0300)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Standard_Phillips           ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Standard_MSB                ((uint16_t)0x0010)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Standard_LSB                ((uint16_t)0x0020)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Standard_PCMShort           ((uint16_t)0x0030)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_Standard_PCMLong            ((uint16_t)0x00B0)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_DataFormat_16b              ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_DataFormat_16bextended      ((uint16_t)0x0001)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_DataFormat_24b              ((uint16_t)0x0003)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_DataFormat_32b              ((uint16_t)0x0005)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_MCLKOutput_Enable           ((uint16_t)0x0200)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_MCLKOutput_Disable          ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_CPOL_Low                    ((uint16_t)0x0000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_CPOL_High                   ((uint16_t)0x0008)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_I2S_DMAReq_Tx               ((uint16_t)0x0002)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_I2S_DMAReq_Rx               ((uint16_t)0x0001)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_SPI_I2S_DMAREQ(DMAREQ) ((((DMAREQ) & (uint16_t)0xFFFC) == 0x00) && ((DMAREQ) != 0x00))
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_NSSInternalSoft_Set         ((uint16_t)0x0100)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_NSSInternalSoft_Reset       ((uint16_t)0xFEFF)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Direction_Rx                ((uint16_t)0xBFFF)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_Direction_Tx                ((uint16_t)0x4000)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_I2S_FLAG_RXNE               ((uint16_t)0x0001)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_I2S_FLAG_TXE                ((uint16_t)0x0002)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_FLAG_CHSIDE                 ((uint16_t)0x0004)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define I2S_FLAG_UDR                    ((uint16_t)0x0008)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_FLAG_CRCERR                 ((uint16_t)0x0010)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_FLAG_MODF                   ((uint16_t)0x0020)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_I2S_FLAG_OVR                ((uint16_t)0x0040)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define SPI_I2S_FLAG_BSY                ((uint16_t)0x0080)
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
stm32f10x_spi.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define SMCR_ETR_Mask               ((uint16_t)0x00FF) 
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CCMR_Offset                 ((uint16_t)0x0018)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CCER_CCE_Set                ((uint16_t)0x0001)  
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define	CCER_CCNE_Set               ((uint16_t)0x0004) 
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpcr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->DIER &= (uint16_t)~TIM_IT;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->DIER &= (uint16_t)~TIM_DMASource;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                             uint16_t ExtTRGFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpsmcr = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                   uint16_t ExtTRGFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpsmcr = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpcr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpsmcr = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpsmcr = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmp = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)~ tmp;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmp = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t) ~tmp;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmp1 = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t) ~tmp1;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->SR = (uint16_t)~TIM_FLAG;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t itstatus = 0x0, itenable = 0x0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->SR = (uint16_t)~TIM_IT;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0, tmpccer = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmp = (uint16_t)(TIM_ICPolarity << 4);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmp = (uint16_t)(TIM_ICPolarity << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):                       uint16_t TIM_ICFilter)
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmp = (uint16_t)(TIM_ICPolarity << 12);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
stm32f10x_tim.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_CounterMode;       /*!< Specifies the counter mode.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_Period;            /*!< Specifies the period value to be loaded into the active
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_ClockDivision;     /*!< Specifies the clock division.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OCMode;        /*!< Specifies the TIM mode.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OutputState;   /*!< Specifies the TIM Output Compare state.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OutputNState;  /*!< Specifies the TIM complementary Output Compare state.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register. 
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OCPolarity;    /*!< Specifies the output polarity.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OCNPolarity;   /*!< Specifies the complementary output polarity.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_Channel;      /*!< Specifies the TIM channel.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_ICPolarity;   /*!< Specifies the active edge of the input signal.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_ICSelection;  /*!< Specifies the input.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_ICPrescaler;  /*!< Specifies the Input Capture Prescaler.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_ICFilter;     /*!< Specifies the input capture filter.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OSSRState;        /*!< Specifies the Off-State selection used in Run mode.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_OSSIState;        /*!< Specifies the Off-State used in Idle state.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_LOCKLevel;        /*!< Specifies the LOCK level parameters.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_DeadTime;         /*!< Specifies the delay time between the switching-off and the
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_Break;            /*!< Specifies whether the TIM Break input is enabled or not. 
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_BreakPolarity;    /*!< Specifies the TIM Break Input pin polarity.
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t TIM_AutomaticOutput;  /*!< Specifies whether the TIM Automatic Output feature is enabled or not. 
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCMode_Timing                  ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCMode_Active                  ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCMode_Inactive                ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCMode_Toggle                  ((uint16_t)0x0030)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCMode_PWM1                    ((uint16_t)0x0060)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCMode_PWM2                    ((uint16_t)0x0070)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OPMode_Single                  ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OPMode_Repetitive              ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_Channel_1                      ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_Channel_2                      ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_Channel_3                      ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_Channel_4                      ((uint16_t)0x000C)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CKD_DIV1                       ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CKD_DIV2                       ((uint16_t)0x0100)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CKD_DIV4                       ((uint16_t)0x0200)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CounterMode_Up                 ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CounterMode_Down               ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CounterMode_CenterAligned1     ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CounterMode_CenterAligned2     ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CounterMode_CenterAligned3     ((uint16_t)0x0060)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCPolarity_High                ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCPolarity_Low                 ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCNPolarity_High               ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCNPolarity_Low                ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OutputState_Disable            ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OutputState_Enable             ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OutputNState_Disable           ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OutputNState_Enable            ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CCx_Enable                      ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CCx_Disable                     ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CCxN_Enable                     ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_CCxN_Disable                    ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_Break_Enable                   ((uint16_t)0x1000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_Break_Disable                  ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_BreakPolarity_Low              ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_BreakPolarity_High             ((uint16_t)0x2000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_AutomaticOutput_Enable         ((uint16_t)0x4000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_AutomaticOutput_Disable        ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_LOCKLevel_OFF                  ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_LOCKLevel_1                    ((uint16_t)0x0100)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_LOCKLevel_2                    ((uint16_t)0x0200)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_LOCKLevel_3                    ((uint16_t)0x0300)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OSSIState_Enable               ((uint16_t)0x0400)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OSSIState_Disable              ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OSSRState_Enable               ((uint16_t)0x0800)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OSSRState_Disable              ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCIdleState_Set                ((uint16_t)0x0100)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCIdleState_Reset              ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCNIdleState_Set               ((uint16_t)0x0200)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCNIdleState_Reset             ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define  TIM_ICPolarity_Rising             ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define  TIM_ICPolarity_Falling            ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define  TIM_ICPolarity_BothEdge           ((uint16_t)0x000A)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICSelection_DirectTI           ((uint16_t)0x0001) /*!< TIM Input 1, 2, 3 or 4 is selected to be 
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICSelection_IndirectTI         ((uint16_t)0x0002) /*!< TIM Input 1, 2, 3 or 4 is selected to be
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICSelection_TRC                ((uint16_t)0x0003) /*!< TIM Input 1, 2, 3 or 4 is selected to be connected to TRC. */
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICPSC_DIV1                     ((uint16_t)0x0000) /*!< Capture performed each time an edge is detected on the capture input. */
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICPSC_DIV2                     ((uint16_t)0x0004) /*!< Capture performed once every 2 events. */
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICPSC_DIV4                     ((uint16_t)0x0008) /*!< Capture performed once every 4 events. */
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ICPSC_DIV8                     ((uint16_t)0x000C) /*!< Capture performed once every 8 events. */
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_Update                      ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_CC1                         ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_CC2                         ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_CC3                         ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_CC4                         ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_COM                         ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_Trigger                     ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_IT_Break                       ((uint16_t)0x0080)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_TIM_IT(IT) ((((IT) & (uint16_t)0xFF00) == 0x0000) && ((IT) != 0x0000))
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CR1                    ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CR2                    ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_SMCR                   ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_DIER                   ((uint16_t)0x0003)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_SR                     ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_EGR                    ((uint16_t)0x0005)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCMR1                  ((uint16_t)0x0006)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCMR2                  ((uint16_t)0x0007)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCER                   ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CNT                    ((uint16_t)0x0009)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_PSC                    ((uint16_t)0x000A)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_ARR                    ((uint16_t)0x000B)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_RCR                    ((uint16_t)0x000C)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCR1                   ((uint16_t)0x000D)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCR2                   ((uint16_t)0x000E)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCR3                   ((uint16_t)0x000F)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_CCR4                   ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_BDTR                   ((uint16_t)0x0011)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABase_DCR                    ((uint16_t)0x0012)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_1Transfer           ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_2Transfers          ((uint16_t)0x0100)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_3Transfers          ((uint16_t)0x0200)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_4Transfers          ((uint16_t)0x0300)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_5Transfers          ((uint16_t)0x0400)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_6Transfers          ((uint16_t)0x0500)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_7Transfers          ((uint16_t)0x0600)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_8Transfers          ((uint16_t)0x0700)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_9Transfers          ((uint16_t)0x0800)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_10Transfers         ((uint16_t)0x0900)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_11Transfers         ((uint16_t)0x0A00)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_12Transfers         ((uint16_t)0x0B00)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_13Transfers         ((uint16_t)0x0C00)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_14Transfers         ((uint16_t)0x0D00)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_15Transfers         ((uint16_t)0x0E00)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_16Transfers         ((uint16_t)0x0F00)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_17Transfers         ((uint16_t)0x1000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMABurstLength_18Transfers         ((uint16_t)0x1100)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_Update                     ((uint16_t)0x0100)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_CC1                        ((uint16_t)0x0200)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_CC2                        ((uint16_t)0x0400)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_CC3                        ((uint16_t)0x0800)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_CC4                        ((uint16_t)0x1000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_COM                        ((uint16_t)0x2000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_DMA_Trigger                    ((uint16_t)0x4000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_TIM_DMA_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0x80FF) == 0x0000) && ((SOURCE) != 0x0000))
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ExtTRGPSC_OFF                  ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ExtTRGPSC_DIV2                 ((uint16_t)0x1000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ExtTRGPSC_DIV4                 ((uint16_t)0x2000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ExtTRGPSC_DIV8                 ((uint16_t)0x3000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_ITR0                        ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_ITR1                        ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_ITR2                        ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_ITR3                        ((uint16_t)0x0030)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_TI1F_ED                     ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_TI1FP1                      ((uint16_t)0x0050)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_TI2FP2                      ((uint16_t)0x0060)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TS_ETRF                        ((uint16_t)0x0070)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TIxExternalCLK1Source_TI1      ((uint16_t)0x0050)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TIxExternalCLK1Source_TI2      ((uint16_t)0x0060)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TIxExternalCLK1Source_TI1ED    ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ExtTRGPolarity_Inverted        ((uint16_t)0x8000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ExtTRGPolarity_NonInverted     ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_PSCReloadMode_Update           ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_PSCReloadMode_Immediate        ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ForcedAction_Active            ((uint16_t)0x0050)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_ForcedAction_InActive          ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EncoderMode_TI1                ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EncoderMode_TI2                ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EncoderMode_TI12               ((uint16_t)0x0003)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_Update             ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_CC1                ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_CC2                ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_CC3                ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_CC4                ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_COM                ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_Trigger            ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_EventSource_Break              ((uint16_t)0x0080)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_TIM_EVENT_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0xFF00) == 0x0000) && ((SOURCE) != 0x0000))
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_UpdateSource_Global            ((uint16_t)0x0000) /*!< Source of update is the counter overflow/underflow
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_UpdateSource_Regular           ((uint16_t)0x0001) /*!< Source of update is counter overflow/underflow. */
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCPreload_Enable               ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCPreload_Disable              ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCFast_Enable                  ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCFast_Disable                 ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCClear_Enable                 ((uint16_t)0x0080)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_OCClear_Disable                ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_Reset               ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_Enable              ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_Update              ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_OC1                 ((uint16_t)0x0030)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_OC1Ref              ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_OC2Ref              ((uint16_t)0x0050)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_OC3Ref              ((uint16_t)0x0060)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_TRGOSource_OC4Ref              ((uint16_t)0x0070)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_SlaveMode_Reset                ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_SlaveMode_Gated                ((uint16_t)0x0005)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_SlaveMode_Trigger              ((uint16_t)0x0006)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_SlaveMode_External1            ((uint16_t)0x0007)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_MasterSlaveMode_Enable         ((uint16_t)0x0080)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_MasterSlaveMode_Disable        ((uint16_t)0x0000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_Update                    ((uint16_t)0x0001)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC1                       ((uint16_t)0x0002)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC2                       ((uint16_t)0x0004)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC3                       ((uint16_t)0x0008)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC4                       ((uint16_t)0x0010)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_COM                       ((uint16_t)0x0020)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_Trigger                   ((uint16_t)0x0040)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_Break                     ((uint16_t)0x0080)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC1OF                     ((uint16_t)0x0200)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC2OF                     ((uint16_t)0x0400)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC3OF                     ((uint16_t)0x0800)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define TIM_FLAG_CC4OF                     ((uint16_t)0x1000)
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_TIM_CLEAR_FLAG(TIM_FLAG) ((((TIM_FLAG) & (uint16_t)0xE100) == 0x0000) && ((TIM_FLAG) != 0x0000))
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):                                uint16_t TIM_ICPolarity, uint16_t ICFilter);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):                             uint16_t ExtTRGFilter);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):                   uint16_t ExtTRGFilter);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t TIM_GetCounter(TIM_TypeDef* TIMx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);
stm32f10x_tim.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_UE_Set                ((uint16_t)0x2000)  /*!< USART Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_UE_Reset              ((uint16_t)0xDFFF)  /*!< USART Disable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_WAKE_Mask             ((uint16_t)0xF7FF)  /*!< USART WakeUp Method Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_RWU_Set               ((uint16_t)0x0002)  /*!< USART mute mode Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_RWU_Reset             ((uint16_t)0xFFFD)  /*!< USART mute mode Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_SBK_Set               ((uint16_t)0x0001)  /*!< USART Break Character send Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR1_CLEAR_Mask            ((uint16_t)0xE9F3)  /*!< USART CR1 Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_Address_Mask          ((uint16_t)0xFFF0)  /*!< USART address Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_LINEN_Set              ((uint16_t)0x4000)  /*!< USART LIN Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_LINEN_Reset            ((uint16_t)0xBFFF)  /*!< USART LIN Disable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_LBDL_Mask             ((uint16_t)0xFFDF)  /*!< USART LIN Break detection Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_STOP_CLEAR_Mask       ((uint16_t)0xCFFF)  /*!< USART CR2 STOP Bits Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR2_CLOCK_CLEAR_Mask      ((uint16_t)0xF0FF)  /*!< USART CR2 Clock Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_SCEN_Set              ((uint16_t)0x0020)  /*!< USART SC Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_SCEN_Reset            ((uint16_t)0xFFDF)  /*!< USART SC Disable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_NACK_Set              ((uint16_t)0x0010)  /*!< USART SC NACK Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_NACK_Reset            ((uint16_t)0xFFEF)  /*!< USART SC NACK Disable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_HDSEL_Set             ((uint16_t)0x0008)  /*!< USART Half-Duplex Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_HDSEL_Reset           ((uint16_t)0xFFF7)  /*!< USART Half-Duplex Disable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_IRLP_Mask             ((uint16_t)0xFFFB)  /*!< USART IrDA LowPower mode Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_CLEAR_Mask            ((uint16_t)0xFCFF)  /*!< USART CR3 Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_IREN_Set              ((uint16_t)0x0002)  /*!< USART IrDA Enable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define CR3_IREN_Reset            ((uint16_t)0xFFFD)  /*!< USART IrDA Disable Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define GTPR_LSB_Mask             ((uint16_t)0x00FF)  /*!< Guard Time Register LSB Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define GTPR_MSB_Mask             ((uint16_t)0xFF00)  /*!< Guard Time Register MSB Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):#define IT_Mask                   ((uint16_t)0x001F)  /*!< USART Interrupt Mask */
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->CR2 = (uint16_t)tmpreg;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->CR1 = (uint16_t)tmpreg;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->CR3 = (uint16_t)tmpreg;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->BRR = (uint16_t)tmpreg;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->CR2 = (uint16_t)tmpreg;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->DR = (Data & (uint16_t)0x01FF);
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->SR = (uint16_t)~USART_FLAG;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  uint16_t bitpos = 0x00, itmask = 0x00;
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
stm32f10x_usart.c (G:\0_0stm32\STM32_Template\Libraries\FWlib\src):  USARTx->SR = (uint16_t)~itmask;
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_WordLength;          /*!< Specifies the number of data bits transmitted or received in a frame.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_StopBits;            /*!< Specifies the number of stop bits transmitted.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_Parity;              /*!< Specifies the parity mode.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_Mode;                /*!< Specifies wether the Receive or Transmit mode is enabled or disabled.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_HardwareFlowControl; /*!< Specifies wether the hardware flow control mode is enabled
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_Clock;   /*!< Specifies whether the USART clock is enabled or disabled.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_CPOL;    /*!< Specifies the steady state value of the serial clock.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_CPHA;    /*!< Specifies the clock transition on which the bit capture is made.
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):  uint16_t USART_LastBit; /*!< Specifies whether the clock pulse corresponding to the last transmitted
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_WordLength_8b                  ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_WordLength_9b                  ((uint16_t)0x1000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_StopBits_1                     ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_StopBits_0_5                   ((uint16_t)0x1000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_StopBits_2                     ((uint16_t)0x2000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_StopBits_1_5                   ((uint16_t)0x3000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Parity_No                      ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Parity_Even                    ((uint16_t)0x0400)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Parity_Odd                     ((uint16_t)0x0600) 
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Mode_Rx                        ((uint16_t)0x0004)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Mode_Tx                        ((uint16_t)0x0008)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_USART_MODE(MODE) ((((MODE) & (uint16_t)0xFFF3) == 0x00) && ((MODE) != (uint16_t)0x00))
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_HardwareFlowControl_None       ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_HardwareFlowControl_RTS        ((uint16_t)0x0100)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_HardwareFlowControl_CTS        ((uint16_t)0x0200)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_HardwareFlowControl_RTS_CTS    ((uint16_t)0x0300)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Clock_Disable                  ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_Clock_Enable                   ((uint16_t)0x0800)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_CPOL_Low                       ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_CPOL_High                      ((uint16_t)0x0400)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_CPHA_1Edge                     ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_CPHA_2Edge                     ((uint16_t)0x0200)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_LastBit_Disable                ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_LastBit_Enable                 ((uint16_t)0x0100)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_PE                          ((uint16_t)0x0028)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_TXE                         ((uint16_t)0x0727)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_TC                          ((uint16_t)0x0626)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_RXNE                        ((uint16_t)0x0525)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_IDLE                        ((uint16_t)0x0424)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_LBD                         ((uint16_t)0x0846)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_CTS                         ((uint16_t)0x096A)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_ERR                         ((uint16_t)0x0060)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_ORE                         ((uint16_t)0x0360)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_NE                          ((uint16_t)0x0260)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IT_FE                          ((uint16_t)0x0160)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_DMAReq_Tx                      ((uint16_t)0x0080)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_DMAReq_Rx                      ((uint16_t)0x0040)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_USART_DMAREQ(DMAREQ) ((((DMAREQ) & (uint16_t)0xFF3F) == 0x00) && ((DMAREQ) != (uint16_t)0x00))
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_WakeUp_IdleLine                ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_WakeUp_AddressMark             ((uint16_t)0x0800)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_LINBreakDetectLength_10b      ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_LINBreakDetectLength_11b      ((uint16_t)0x0020)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IrDAMode_LowPower              ((uint16_t)0x0004)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_IrDAMode_Normal                ((uint16_t)0x0000)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_CTS                       ((uint16_t)0x0200)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_LBD                       ((uint16_t)0x0100)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_TXE                       ((uint16_t)0x0080)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_TC                        ((uint16_t)0x0040)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_RXNE                      ((uint16_t)0x0020)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_IDLE                      ((uint16_t)0x0010)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_ORE                       ((uint16_t)0x0008)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_NE                        ((uint16_t)0x0004)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_FE                        ((uint16_t)0x0002)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define USART_FLAG_PE                        ((uint16_t)0x0001)
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):#define IS_USART_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFC9F) == 0x00) && ((FLAG) != (uint16_t)0x00))
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):uint16_t USART_ReceiveData(USART_TypeDef* USARTx);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
stm32f10x_usart.h (G:\0_0stm32\STM32_Template\Libraries\FWlib\inc):void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
uart.c (G:\0_0stm32\STM32_Template\User\uart):void UART3_SendData(uint16_t *c, int length)
